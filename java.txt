1.java安装
Java 在/usr/local/java/，已卸载 环境变量在/etc/profile  source /etc/profile
Java 在/usr/local/java/jdk8
查看需要卸载掉包
rpm -qa|grep java
rpm -e -nodeps java-1.8.0-openjdk-1.8.0.191.b12-0.el7_5.x86_64
(openjdk-headless也卸载了，其它的就不卸载了)

下载jdk-8u171-linux-x64.tar.gz

在/usr/local/下mkdir java
把jdk-8u171-linux-x64.tar.gz移动到/usr/local/java下
tar -zxvf jdk-8u171-linux-x64.tar.gz
修改/etc/profile, 在末尾添加
export JAVA_HOME=/usr/local/java/jdk8
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$JAVA_HOME/bin:$PATH
等号与变量和路径之间不要加空格

2.Java数组字符串输出
System.out.println(Arrays.toString(array));


3.字符流与字节流
字符与字节，‘a’是字符，97是字节。
字符流处理的单元为2个字节的Unicode字符，分别操作字符、字符数组或字符串。
所有文件的储存是都是字节（byte）的储存。
字节流在操作时不会用到缓冲区（内存），是直接对文件本身进行操作的。而字符流在操作时使用了缓冲区，通过缓冲区再操作文件。 
字符流其实是通过转换流变化为字节流再进行IO操作。
字符流到文件流的转换Java提供了两个转换流：InputStreamReader和OutputStreamWriter。
为了提高数据的传输效率，特意引入缓冲流(Buffered Stream)的概念，为每一个流配置一个缓冲(Buffered)，BufferedReader类 ，BufferedWriter类。

4.add-ons:译为附加软件，即插件，外挂的意思。

5.TreeMap
TreeMap 是一个有序的key-value集合，它是通过红黑树实现的.
Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();
while (iterator.hasNext()) {
    Map.Entry<String, String> entry = iterator.next();
    System.out.println(entry.getKey() + "　：" + entry.getValue());
}
Map遍历最快。


6.List遍历
LinkedList 使用迭代器较快
Iterator<String> it = list.iterator();
while(it.hasNext()){
    System.out.println(it.next());
}
ArrayList 使用get(index)
List<String> list = new ArrayList<String>();
for(int i = 0; i < list.size(); i++){
    System.out.println(list.get(i));
}



7.Java socket
Socket 和ServerSocket 是一对  他们是java.net下面实现socket通信的类
SocketChannel 和ServerSocketChannel是一对   他们是java.nio下面实现通信的类 支持异步通信



8.Netty
Netty 是一个基于NIO的客户、服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户，服务端应用。Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。
https://mvnrepository.com/artifact/io.netty/netty-all 查看最新的maven仓库



9.NIO中都是使用缓冲区buffer
在基本IO操作中，所有的数据都是以流的形式操作的，而在NIO中，则都是使用缓冲区，所有的读写操作都是使用缓冲区完成的。
所有缓冲区都是抽象类Buffer的子类。Java NIO中的Buffer主要用于与NIO通道进行交互，数据是从通道读入到缓冲区，从缓冲区写入通道中的。
缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。



10.volatile 英 [ˈvɒlətaɪl] 
可见性
一个线程对变量更新，另外一个线程是否可以看见这个更新了的值.
为什么不可见
计算机为了提高整体运行效率，使得CPU不会直接与内存（主存）进行通信，会先使用缓存替代主存。
使用缓存好处主要两点：一，缓存读写数据比内存读写数据速度更快，能更好地被CPU使用。二，如果缓存可以部分满足CPU对主存的需要，那么就会降低主存的读写频率，意味着降低总线的繁忙程度，整体上提高机器的执行速度。
缓存有优点，但是同样也会带来一些问题：因为线程之间通过主存通信，主存是可以被多个CPU共享访问的，而缓存只能供当前的CPU访问，关键问题是一个缓存与主存同步数据的频率是没有严格约束的，那么也就是说CPU之间无法及时看到彼此最新更新的数据.

有volatile变量修饰的共享变量进行写操作的时候会使用lock汇编指令，而lock指令(默认场景为多核处理器下)会引发了三件事情：
将当前处理器缓存行的数据会写回到系统主存。
写回主存操作会接着使其他存储了这个变量的缓存数据失效（缓存一致性协议保证）。
禁止某些指令的重排序.
i++并非是单个操作，所以并不能原子性完成。

什么是重排序
在JMM中，编译器(包括JIT)、CPU、缓存被允许做一些代码指令的重新排序以达到优化性能的目的。

helper=new Helper
操作1:分配内存空间
操作2:初始化Helper对象
操作3:将helper引用指向内存空间



11.@Repository注解的作用及含义
@Repository注解非常重要，它将类在web应用程序中的位置标识出来了，同时也让spring容器扫描的时候能将这个类找到并归入到可以使用自动注入的类中。
注解还有@Service和@Controller，本质相同由于功能不同以不同名字区分。
@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。
@Service 通常作用在业务层，但是目前该功能与 @Component 相同。
@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。

以上注解配合@Autowired实现自动注入实例，就不用自己在写new xxx;



12.JSSE
Java安全套接字扩展
JSSE提供的加密功能
密码算法	加密过程	密钥长度（位）
RSA	身份验证和密钥交换	512或更大
RC4	批量加密	128 128（40有效）
DES	批量加密	64（56有效）64（40有效）
三重DES	批量加密	192（112有效）
AES	批量加密	256  128
Diffie-Hellman	重要协议	1024，512
DSA	认证	1024
SunJSSE实现使用Java Cryptography Extension（JCE）来实现其所有加密算法



13.JCA（Java Cryptography Architecture ）不含加密功能的
JCE，Java Cryptography Extension 含加密功能的
在早期JDK版本中，由于受美国的密码出口条例约束，Java中涉及加解密功能的API被限制出口，所以Java中安全组件被分成了两部分: 不含加密功能的JCA（Java Cryptography Architecture ）和含加密功能的JCE（Java Cryptography Extension）,在JDK1.1-1.3版本期间，JCE属于扩展包，仅供美国和加拿大的用户下载，JDK1.4+版本后，随JDK核心包一起分发.
JCE的API都在javax.crypto包下.
加解密功能由Cipher组件提供，其也是JCE中最核心的组件。
JCA API在java.security下.
清单：
com.sun.security.auth.module	JndiLoginModule	Performs username/password authentication using LDAP or NIS
com.sun.security.auth.module	KeyStoreLoginModule	Performs authentication based on key store login
com.sun.security.auth.module	Krb5LoginModule	Performs authentication using Kerberos protocols
java.lang	SecurityException	Indicates a security violation
java.lang	SecurityManager	Mediates all access control decisions
java.lang	System	Installs the SecurityManager
java.security	AccessController	Called by default implementation of SecurityManager to make access control decisions
java.security	Key	Represents a cryptographic key
java.security	KeyStore	Represents a repository of keys and trusted certificates
java.security	MessageDigest	Represents a message digest
java.security	Permission	Represents access to a particular resource
java.security	Policy	Encapsulates the security policy
java.security	Provider	Encapsulates security service implementations
java.security	Security	Manages security providers and security properties
java.security	Signature	Creates and verifies digital signatures
java.security.cert	Certificate	Represents a public key certificate
java.security.cert	CertStore	Represents a repository of unrelated and typically untrusted certificates
java.security.cert	CRL	Represents a CRL
javax.crypto	Cipher	Performs encryption and decryption
javax.crypto	KeyAgreement	Performs a key exchange
javax.net.ssl	KeyManager	Manages keys used to perform SSL/TLS authentication
javax.net.ssl	SSLEngine	Produces/consumes SSL/TLS packets, allowing the application freedom to choose a transport mechanism
javax.net.ssl	SSLSocket	Represents a network socket that encapsulates SSL/TLS support on top of a normal stream socket
javax.net.ssl	TrustManager	Makes decisions about who to trust in SSL/TLS interactions (for example, based on trusted certificates in key stores)
javax.security.auth	Subject	Represents a user
javax.security.auth.kerberos	KerberosPrincipal	Represents a Kerberos principal
javax.security.auth.kerberos	KerberosTicket	Represents a Kerberos ticket
javax.security.auth.kerberos	KerberosKey	Represents a Kerberos key
javax.security.auth.kerberos	KerberosTab	Represents a Kerberos keytab file
javax.security.auth.login	LoginContext	Supports pluggable authentication
javax.security.auth.spi	LoginModule	Implements a specific authentication mechanism
javax.security.sasl	Sasl	Creates SaslClient and SaslServer objects
javax.security.sasl	SaslClient	Performs SASL authentication as a client
javax.security.sasl	SaslServer	Performs SASL authentication as a server
org.ietf.jgss	GSSContext	Encapsulates a GSS-API security context and provides the security services available via the context



14.Thread和Runnable的区别
想实现多线程，有两种手段，一种是继续Thread类，另外一种是实现Runable接口
class MyThread extends Thread{
	@Override
	Public void run(){
		
	}
}
MyThread t = new MyThread();
t.start();

class MyThread implements Runnable{
	@Override
	public void run(){
		
	}	
}
MyThread t = new MyThread();
t.start();

在程序开发中只要是多线程肯定永远以实现Runnable接口为主。
实现Runnable接口相比继承Thread类有如下好处：
1、避免继承的局限，一个类可以继承多个接口。
2、适合于资源的共享。



15.synchronized关键字
它包括两种用法：synchronized 方法和 synchronized 块
声明为 synchronized 的成员函数中至多只有一个处于可执行状态，从而有效避免了类成员变量的访问冲突。
synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率，典型地，若将线程类的方法 run() 声明为synchronized，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 synchronized 方法的调用都永远不会成功。

synchronized块：通过 synchronized关键字来声明synchronized块。语法如下：  
synchronized(syncObject) {  
//允许访问控制的代码  
}  
synchronized块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行。
由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。  
对synchronized(this)的一些理解 
1.当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。
2.synchronized (this)锁住的是对象，而不是代码。



16.final
它指的是“这是不可变的”.
1.修饰数据
用final关键字修饰的变量，只能进行一次赋值操作，并且在生存期内不可以改变它的值。更重要的是，final会告诉编译器，这个数据是不会修改的，那么编译器就可能会在编译时期就对该数据进行替换甚至执行计算，这样可以对我们的程序起到一点优化。
2.修饰方法参数
使用final修饰表示我们只会给它赋值一次且不会改变变量的值。如果变量是我们自己创建的，那么使用final修饰表示我们只会给它赋值一次且不会改变变量的值。
3.修饰方法
用final关键字修饰方法，它表示该方法不能被覆盖。
4.修饰类
了解了final关键字的其他用法，我们很容易可以想到使用final关键字修饰类的作用，那就是用final修饰的类是无法被继承的。



17.AtomicInteger通过一种线程安全的加减操作接口
static AtomicInteger ai=new AtomicInteger(0);
ai.incrementAndGet();//增加



18.java线程池
Java通过Executors提供四种线程池，分别为：
newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。
newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
(1). newCachedThreadPool
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
cachedThreadPool.execute(new Runnable() {
        @Override
        public void run() {
            System.out.println(index);
        }
    });
(2). newFixedThreadPool
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);//设置根据实际情况一步一步调大。
fixedThreadPool.execute(new Runnable() {
        @Override
        public void run() {
            try {
                System.out.println(index);
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
(3) newScheduledThreadPool
创建一个定长线程池，支持定时及周期性任务执行。
ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);
scheduledThreadPool.schedule(new Runnable() {
    @Override
    public void run() {
        System.out.println("delay 3 seconds");
    }
}, 3, TimeUnit.SECONDS);
(4)、newSingleThreadExecutor
创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行
ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();
for (int i = 0; i < 10; i++) {
    final int index = i;
    singleThreadExecutor.execute(new Runnable() {

        @Override
        public void run() {
            try {
                System.out.println(index);
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
}
execute()与submit()
execute()方法的入参为一个Runnable，返回值为void，这时候我们已经知道了execute()方法的来源以及其定义。
submit()有返回值，而execute()没有;
　　　例如，有个validation的task，希望该task执行完后告诉我它的执行结果，是成功还是失败，然后继续下面的操作。
submit()可以进行Exception处理;
　　　例如，如果task里会抛出checked或者unchecked exception，而你又希望外面的调用者能够感知这些exception并做出及时的处理，那么就需要用到submit，通过对Future.get()进行抛出异常的捕获，然后对其进行处理。



19.Lock与synchronized有以下区别：
1）Lock是一个接口，而synchronized是关键字。
2）synchronized会自动释放锁，而Lock必须手动释放锁。
3）Lock可以让等待锁的线程响应中断，而synchronized不会，线程会一直等待下去。
4）通过Lock可以知道线程有没有拿到锁，而synchronized不能。
5）Lock能提高多个线程读操作的效率。
6）synchronized能锁住类、方法和代码块，而Lock是块范围内的



20.jstack
jstack -l pid
jstack是java虚拟机自带的一种堆栈跟踪工具。

jmap
JVM堆中对象情况
jmap -heap pid
查看堆配置情况和使用情况
jmap -histo pid
查看详细的内存对象创建情况
jmap -dump:format=b,file=文件名 pid
使用jmap 生成快照文件

jconsole 
是一个内置 Java 性能分析器
远程连接



21.数组和集合的操作
1)数组的join:
<dependency>
   <groupId>commons-lang</groupId>
   <artifactId>commons-lang</artifactId>
   <version>2.6</version>
</dependency>
StringUtils.join(array,",");
String.join()是JDK8新增方法,无需引包
String.join(",",array);
2）数组合并
(1)先转为list，利用list.addAll()，再转回数组;
List list = new ArrayList(Arrays.asList(a));
list.addAll(Arrays.asList(b));
Object[] c = list.toArray();
(2)使用System.arraycopy
(3)org.apache.commons.lang3.ArrayUtils.addAll



22.statement.executeUpdate,statement.executeQuery
SQL字符串字段一定要额外加"",如：
String name = "zwj";
String sql = xxx + "\"" + name + "\"";
不然会出现Unknown column 'xxx' in 'field list'.



23.异步定时器
Timer timer = new Timer();
timer.schedule(new TimerTask() {
        public void run() {
            System.out.println("11232");
        }
}, 200000 , 1000);



24.-ea可打开断言机制



25.java -Xms 初始堆大小 -Xmx 最大堆大小
-XX:NewSize
young代的初始值和最小值
-XX:MaxNewSize
young区空间的最大值





26.idea
函数添加注释
“File”-->“Settings”-->“Live Templates”打开如下对话框，点击右边绿色的加号，创建一个自定义的Template Group
取名‘MyGroup’
选中‘MyGroup’，点击Live Template：
/**
 * $description$
 * @author zhangweijin
 * date $DATE$ $TIME$
 $params$
 * return $return$
**/
编辑"edit variables”：
date("yyyy-MM-dd")
time("HH:mm")
groovyScript("def result=''; def params=\"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i < params.size(); i++) {result+='* @param ' + params[i] + ((i < params.size() - 1) ? '\\n ' : '')}; return result", methodParameters())
methodReturnType()





27.enum类
public enum ResultCode {
	SUCCESS(1, "成功"),
    ERROR(500,"程序内部错误"),
    EXIST_LIBRARY(501,"仓库下面存在库区");
	
	private Integer code;
    private String message;
	
	ResultCode(Integer code, String message) {
        this.code = code;
        this.message = message;
    }
	
	/**
     * 获取code
     * @return Integer
     * date: 2018/10/18 16:50
     */
    public Integer code() {
        return this.code;
    }

    /**
     * 获取message
     * @return String
     * date: 2018/10/18 16:50
     */
    public String message() {
        return this.message;
    }
	
	/**
     * 根据name获取message
     * @param name name
     * @return String
     * date: 2018/10/18 16:52
     */
    public static String getMessage(String name) {
        for (ResultCode item : ResultCode.values()) {
            if (item.name().equals(name)) {
                return item.message;
            }
        }
        return name;
    }
}




28.java连接Modbus
java的解决框架有j2mod、jamod、modbus4j等




29.modbus
modbus4j
https://github.com/infiniteautomation/modbus4j





30.byte与&0xff
Integer.toHexString把int转二进制打印，对于byte需要&ff.
Integer.toHexString的参数是int，如果不进行&0xff，那么当一个byte会转换成int时，由于int是32位，而byte只有8位这时会进行补位。
那要怎样才能保证byte存储的128，转成int,short的值也应该是128, 128&ff
byte转int都需要&ff




31.数组/链表/哈希表/树结构的优缺点
1) 在链表中删除一个节点是要先查找该节点，这个时间是线性的 O(N)，找到后修改一个指针就完成删除了。
数组通过索引直接查找是很快 O(1)，但是删除的时候有内存的移动操作。这个时间就没准了。
链表的应用场景是在修改比较多的情况，比如添加删除这种。而数组要添加的话，就只能重新分配一个全新的数组了。
这里的数组只指经典意义上的数组。
2)链表：
　　优点：
　　1.链表的插入和删除操作效率都很高
　　缺点：
　　查找效率低，需要从头依次查找链表的每一项
　　即使插入和删除效率高，但是如果插入和删除中间位置，还是要重头找到对应的数据
3) 二叉树如果组织的好的话，根和左右孩子有严格顺序的话，查找时间是 O(log2N)，
因为每次指针移动都可以排除一半的元素（这可是折半查找，能不快么）。
删除也很快，同链表。等你以后数组结构算法用得多了，就知道折半查找的意义了。
4) 哈希表在无碰撞的情况下基本可以认为是一个数组（除了算哈希值这个小开销）。
而哈希值相同（发生碰撞）元素就是一个链表。也就是哈希表同时具备了数组和链表的特性。
这种情况比如在数据量大的时候，可以起到索引的意义。用途不同，这种算是无法和纯粹的链表和数组比效率。
毕竟坦克，越野和超跑你不能拉到一起比，基本无意义。







32.多位数与较小位数的转换中的符号位扩展，零扩展，符号位缩减
符号位扩展：
从某个位数符号扩展到一个更大的位数很简单，只需要将符号位复制到新格式新增的高端各位即可。
零扩展：
处理无符号二进制数的时候，可以使用零扩展（zero extension）将小位数的无符号数扩展到大位数的无符号数。
零扩展非常简单，只需要用零来填充大位数操作数的高端各个字节即可。
符号位缩减：
将一个某位数转换为值相同但位数变小的数。符号扩展永远不会失败。
将一个数正确地符号缩减，必须检查需要丢弃的高端字节。
首先，这些高端字节必须是全零或oxFF，如果它们包含其他值，我们就无法对这个数进行符号缩减。
其次，最终结果的最高位必须与被丢弃的所有位一致。
16位	16位二进制补码表示	8位     8位二进制补码表示
0xFF80	11_1111_1000_0000	0x80	00_0000
0xFE40	11_1110_0100_0000	无法转换






33.<？ extends T>和<? super T>
<? extends T> 是指   “上界通配符（Upper Bounds Wildcards）”
<? super T> 是指  “下界通配符（Lower Bounds Wildcards）”
Plate<？ extends Fruit>
一个能放水果以及一切是水果派生类的盘子。再直白点就是：啥水果都能放的盘子。

Plate<？ super Fruit>
一个能放水果以及一切是水果基类的盘子。Plate<？ super Fruit>是Plate<Fruit>的基类，但不是Plate<Apple>的基类。

上界<? extends T>不能往里存，只能往外取
<? extends Fruit>会使往盘子里放东西的set( )方法失效。但取东西get( )方法还有效。

下界<? super T>不影响往里存，但往外取只能放在Object对象里
使用下界<? super Fruit>会使从盘子里取东西的get( )方法部分失效，只能存放到Object对象里。set( )方法正常。

PECS（Producer Extends Consumer Super）原则：
频繁往外读取内容的，适合用上界Extends。
经常往里插入的，适合用下界Super。

Java泛型中的标记符含义：
 E - Element (在集合中使用，因为集合中存放的是元素)
 T - Type（Java 类）
 K - Key（键）
 V - Value（值）
 N - Number（数值类型）
 ？ -  表示不确定的java类型






34.forEach(System.out::println)
System.out::println，这种语法叫做方法引用。该功能特性也是JDK8以后引入的，你可以把它看做拉姆达表达式的语法糖。
如果我们不这样写的话，我们可以用拉姆达表达式改写成以下代码：list.forEach((t) -> System.out.println(t));





35.函数式编程
函数式接口；它指的是有且只有一个未实现的方法的接口，一般通过FunctionalInterface这个注解来表明某个接口是一个函数式接口。
1）Consumer、Function、Predicate
Consumer是一个函数式编程接口；它包含有一个有输入而无输出的accept接口方法；
除accept方法，它还包含有andThen这个方法。
Function也是一个函数式编程接口；它代表的含义是“函数”，而函数经常是有输入输出的，
因此它含有一个apply方法，包含一个输入与一个输出。
Predicate为函数式接口，predicate的中文意思是“断定”，即判断的意思，
判断某个东西是否满足某种条件； 因此它包含test方法，根据输入值来做逻辑判断，其结果为True或者False。

2）stream
 创建空的Stream对象
 Stream stream = Stream.empty();
 List<String> list = Arrays.asList("a", "b", "c", "d");
 Stream listStream = list.stream();  
java8扩展了集合类，Collection.stream和Collection.parallelStream可以获取stream。
sorted    
filter   
map    
Reduce    
distinct（去除重复元素） 
limit（返回前 n 个元素）
skip(long n) 去除前 n 个元素
flatMap(T -> Stream) 将流中的每一个元素 T 映射为一个流，再把每一个流连接成为一个流
count() 返回流中元素个数，结果为 long 类型
collect 将流转换成List,Map或Set。
findFirst：返回第一个元素，常与orElse一起用:  Stream.findFirst().orElse(null):返回第一个，如果没有则返回null
allMatch：检查是否匹配所有元素:Stream.allMatch(str->str.equals("a"))
anyMatch：检查是否至少匹配一个元素.
数值流方法:
sum()
max()
min()
average() 等

3) Optional
通过Optional.of()和Optional.ofNullable()方法来创建包含值的Optional类实例
of()和ofNullable()方法的区别在于，of()方法不允许传入null值，若传入null值，则在创建对象时就会抛出NullPointerException异常，而ofNullable()从名字上也可以明显的看出，可以传入null值。
ofNullable()方法使用的较多。
orElse()和orELseGet()
orElse()方法与orElseGet()方法的差别根本源自于其接受的参数不同，orElse()方法接受一个类对象并将这个对象作为默认值，而orElseGet()方法接受一个Supplier对象，也就是函数式接口。
orElse()方法会先计算出createNewUser()函数的值，然后执行判断。
而orElseGet()方法则会先执行判断，满足条件时才会执行对应的函数并返回值。
所以对于调用频率非常高的情况时，使用orElseGet()方法就会带来极大的性能提升。
Optional提供了map()和flatMap()两个方法
map()方法接受一个以包装的对象作为参数的Lamda表达式，并将执行的结果包装为Optional对象来返回，注意后面一点非常的重要，它为我们实现级联调用map()方法提供了可能。
如：
String email = Optional.ofNullable(user).map(u -> u.getEmail()).orElse("default@gmail.com");
当user为null时，map()方法返回一个包含null的Optional类，并调用orElse()方法返回默认值
当user.getEmail()为null时，由于map()方法会将Lamda表达式的值包装进Optional类中返回，则调用orElse()方法，仍然返回默认值。
若user和user.getEmail()都不为空时，map()方法调用后将返回包含对应值的Optional对象，调用orElse()方法解包后，将得到对应的user.getEmail()的值。
当大量对象属性或方法访问时使用Optional类后的优化结果：
BigDecimal decimalNumber = Optional.ofNullable(c).map(C::getB).map(B::getA()).map(A::getNumber).orElse(BigDecimal.ZERO);
对比javascript相当于逻辑短路 ||:
obj = (((ob || ob2).getName() || "").length) || 0






36. AOP编程























1）List/Set/Map内部组成原理|区别
2）mysql索引存储结构&如何调优/b-tree特点、计算复杂度及影响复杂度的因素。。。
3）JVM运行组成与原理及调优
4）Java类加载器运行原理
5）Java中GC过程原理|使用的回收算法原理
6）Redis中hash一致性实现及与hash其他区别
7）Java多线程、线程池开发、管理Lock与Synchroined区别
8）Spring IOC/AOP 原理；加载过程的。。。









