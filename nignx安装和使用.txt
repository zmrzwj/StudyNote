--------------------------nginx安装-----------------------
下载tar.gz
tar -zxvf nginx....tar.gz
cd nginx-1.10.3/
./configure --prefix=/usr/local/nginx --with-http_ssl_module //指定安装路径，不指定安装到/usr/local/nginx. 带上ssl
make
make install
(
缺失pcre:
ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/
缺失zlib:
https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.gz
缺失ssl:
http://www.openssl.org/source/
以上三个都是源码安装./configure  make&&make install
 
Ubuntu:
sudo apt-get install libpcre3 libpcre3-dev
sudo apt-get install zlib1g-dev
sudo apt-get install openssl libssl-dev

Centos:
yum install pcre-devel
yum -y install openssl openssl-devel

)

去到/usr/local/nginx/sbin
./nginx (不报错可能安装成功)
查看是否启动
ps -ef|grep nginx
root     27725     1  0 15:32 ?        00:00:00 nginx: master process ./nginx
nobody   27726 27725  0 15:32 ?        00:00:00 nginx: worker process
root     27736 20787  0 15:32 pts/0    00:00:00 grep --color=auto nginx
出现上面则安装成功
浏览器访问IP，可出现 Welcome to nginx!

停止nginx:
快速停止：./nginx -s stop
完整停止：./nginx -s quit
重新加载文件：./nginx -s reload
启动：./nginx (不需要任何参数)

静态文件在
/usr/local/nginx/html/


设置开机启动：
vim /etc/systemd/system/nginx.service

内容如下
[Unit]
Description=nginx
After=network.target
[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true
[Install]
WantedBy=multi-user.target

使文件生效
systemctl daemon-reload

设置开机启动
systemctl enable nginx.service


nginx反向代理：
location /xs/ {
            proxy_pass http://localhost:8080;
            proxy_set_header           Host $host;
            proxy_set_header           X-Real-IP $remote_addr;
            proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;
}
location /xs/AI/ {
            proxy_pass http://127.0.0.1:5000;
}


centos 下 nginx 没有 sites-enabled 文件夹:
编辑 /usr/local/nginx/conf/nginx.conf 在 http block 中添加:
include /usr/local/nginx/conf/sites-enabled/*;
然后再/usr/local/nginx/conf 目录下自己创建一个sites-enabled文件夹就好了


---------------------https--------------------
nginx配置https:
生产crt和key
1.阿里云申请免费证书
https://common-buy.aliyun.com/?spm=5176.7968328.1267759.17.52061232VcmiCC&commodityCode=cas&request=%7B%22brand%22:%22twtrust%22,%22cer_type%22:%22advanced_pro%22,%22domain_type%22:%22multiple%22,%22domain_num%22:%225%22,%22order_num%22:1,%22ord_time%22:%221:Year%22%7D#/buy
证书下载控制台：https://yundunnext.console.aliyun.com/?p=casnext#/overview/cn-hangzhou
2.自己生成
openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /usr/local/nginx/conf/cert/a.key -out /usr/local/nginx/conf/cert/a.crt
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:SiChuan
Locality Name (eg, city) [Default City]: ChengDu
Organization Name (eg, company) [Default Company Ltd]:caddy
Organizational Unit Name (eg, section) []:caddy
Common Name (eg, your name or your server's hostname) []:www.cddw.com
Email Address []:admin@cddw.com
说明：
-x509 指定使用 X.509 证书签名请求（Certificate Signing Request，CSR）管理。
-node 告诉 openssl 在生成证书时忽略密码环节（此处需要 Nginx 自动读取此文件，而非是以用户交互的形式）。
-day 指定证书的有效期。
-newkey rsa:2048 表示生成一个新证书和一个新的 SSL key（加密强度为 RSA 2048）。
-keyout 指定 SSL 输出文件名。
-out 指定生成的证书文件名。

配置nginx.conf
server{
	listen       443;
	server_name  www.cddw.com;
	ssl on;
	ssl_certificate ./cert/a.crt;//阿里的后缀为.pem,请做相应修改
        ssl_certificate_key ./cert/a.key;
        ssl_session_timeout 5m;
        ssl_protocols SSLv2 SSLv3 TLSv1;
	ssl_ciphers  HIGH:!aNULL:!MD5;     //密码加密方式
        ssl_prefer_server_ciphers   on;    //依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码
}
//反向代理同http

再添加一个server将http跳转到https:
server {
        listen 80;
    	# HTTPS 配置
        rewrite ^ https://$http_host$request_uri? permanent;
}

可能错误：
nginx: [emerg] unknown directive "ssl" 
到nginx源代码的解压的目录下
./configure --with-http_ssl_module
make ，切记不能make install 会覆盖。
把新的nginx覆盖旧的
cp objs/nginx /usr/local/nginx/sbin/nginx

测试：
由于访问的地址必须与证书的域名相同，所以内网要测试可以使用hosts:
修改hosts,添加:
192.168.50.52  www.cddw.com



-------------------------------------------   rtmp   -----------------------------------------------------------
0.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。它是由Adobe公司提出的一种应用层的协议，
用来解决多媒体数据传输流的多路复用（Multiplexing）和分包（packetizing）的问题。
随着VR技术的发展，视频直播等领域逐渐活跃起来，RTMP作为业内广泛使用的协议也重新被相关开发者重视起来。


1.下载
https://github.com/arut/nginx-rtmp-module

2. ./configure --prefix=/usr/local/nginx --add-module=../nginx-rtmp-module  --with-http_ssl_module
(nginx-rtmp-module解压在与nginx同级目录)

3. make && make install 

4.cp -R nginx-rtmp-module /usr/local/nginx/


5.配置
与http同级
rtmp { 
    server { 
        listen 1935; 
		#流整合的最大的块大小。默认值为 4096。这个值设置的越大 CPU 负载就越小。这个值不能低于 128。
		chunk_size 4096;
   
        application live { 
            live on; 
			allow publish all;
            allow play all;
        } 
        application hls { 
            live on; 
            hls on; 
            hls_path /tmp/hls; 
			hls_fragment 5s; 
			recorder all {
				record all;
				record_suffix -%Y-%m-%d-%H_%M_%S.flv;
				record_max_size 6200000K;
                record_path /home/rtmp/data/;
			}
        } 
		
		application vod {
			play /home/rtmp/data;
		}
    } 
}  
#recorder设置视频保存
#play播放指定目录或者 HTTP 地址的 flv 或者 mp4 文件。不直播，录制好后放在/home/rtmp/vod下再播，访问rtmp://192.168.11.210:1935/data/xxx.mp4

一些配置参数：max_streams设置 RTMP 流的最大数目。默认值为 32，适用于大多数情况。

在server 80下：

    location /stat {     
            #第二处添加的location字段。查看流状态
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
    }
 
    location /stat.xsl { 
        #第二处添加的location字段。
        root /usr/local/nginx/nginx-rtmp-module/;
    }
	
针对hls，在http里面增加一个location配置:	
location /hls {  
            types {  
                application/vnd.apple.mpegurl m3u8;  
                video/mp2t ts;  
            }  
            root /tmp;  
            add_header Cache-Control no-cache;  
}
	
	

启动nginx:
nginx -s stop
nginx
nginx -s reload

http://192.168.11.210/stat //查看服务状态


下载：OBS
https://obsproject.com/download#mp
新建场景：
	取名nginx
新建来源
    选择‘显示器捕获’
设置：
    串流
	自定义，服务器：rtmp://192.168.11.210/hls,串流密码：test
	
vlc拉流:
RTMP流：rtmp://192.168.11.210:1935/live/test (一定要用好服务器ip,用127.0.0.1或localhost不行)
HLS流：/hls/test.m3u8 （hls是以http协议访问的在服务器上就不要加http://xxxx/了）

videojs:
rtmp：html只能用flash播放flv
 <link href="http://vjs.zencdn.net/5.0.2/video-js.css" rel="stylesheet">
<script src="https://unpkg.com/video.js/dist/video.js"></script>
<script src ="https://cdn.jsdelivr.net/npm/videojs-flash@2/dist/videojs-flash.min.js"></script>

<video id="example_video_1" class="video-js" controls="controls" width="640" height="264"  data-setup="{}">
    <source src="rtmp://192.168.11.210:1935/hls/test" type="rtmp/flv">
</video>
<script>
    videojs.options.flash.swf = './js/video-js/video-js.swf'; // flash路径
    var player = videojs('example_video_1', {
        autoplay: true,
        controls: true,//控制条
        techOrder : ['flash'],
        muted: true,// 静音
        preload: "auto",// 预加载
        language: "zh-CN",// 初始化语言
        playbackRates: [1, 2, 3, 4, 5, 8, 10, 20]// 播放速度
    }, function(){
        console.log('videojs播放器初始化成功')
        player.one("playing", function () {         // 监听播放
            console.log("开始播放");
        });
        player.one("error", function (error) {      // 监听错误
            console.error("监听到异常，错误信息：%o",error);
        });
    })
    player.play();
</script>

hls: m3u8的格式播放，m3u8延迟较大
<link href="https://unpkg.com/video.js/dist/video-js.css" rel="stylesheet">
<script src="https://unpkg.com/video.js/dist/video.js"></script>
<script src="https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js"></script>

<video id="my_video_1" class="video-js vjs-default-skin" controls preload="auto" width="640" height="268"
       data-setup='{}'>
    <source src="/hls/test.m3u8" type="application/x-mpegURL">
</video>


----------------------配置参数解释---------------------
1.server name 为虚拟服务器的识别路径。因此不同的域名会通过请求头中的HOST字段，匹配到特定的server块，转发到对应的应用服务器中去。

server {
	listen  80;
	server_name www.zkh.com;
	location / {
		default_type text/html;
		content_by_lua '
			ngx.say("<p>second</p>")
		';        
	}
}
 
server {
	listen 80;
	server_name www.zkh.*;
	location / {
		default_type text/html;
		content_by_lua '
			ngx.say("<p>third</p>")
		';
 
	}
}

2.websockect nginx配置：
其实同http：
websockect的核心：
Upgrade: websocket
Connection: Upgrade
只是要添加：
	proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
完整设置：
	location  /zwj/ws {
        proxy_pass http://10.217.20.102:8080;

        proxy_redirect    off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
Wss一样在https下配置，因为ws默认端口80，wss默认端口443
其他特点包括：
（1）建立在 TCP 协议之上，服务器端的实现比较容易。
（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。
（3）数据格式比较轻量，性能开销小，通信高效。
（4）可以发送文本，也可以发送二进制数据。
（5）没有同源限制，客户端可以与任意服务器通信。
（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。


3.php配置
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		include fastcgi_params;
	
		fastcgi_pass unix:/run/php/php7.0-fpm.sock;
		fastcgi_param channel $http_channel;
		fastcgi_read_timeout 300;
	}


4.autoindex
autoindex on;
autoindex_exact_size off;
autoindex_localtime on;
charset utf-8;
允许以列表的形式访问目录





