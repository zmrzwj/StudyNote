npm install安装所有插件（插件在package.json里）
sudo npm install webpack -g 全局安装webpack
cd到项目目录运行npm init(创建package.json)
npm install webpack --save-dev 添加webpack模块到项目
npm install webpack-dev-server --save-dev webpack-dev-server是一个小型的node.js Express服务器

html-webapck-plugin：
使用new HtmlWebpackPlugin(conf)，conf为配置json
为html文件中引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题。
可以生成创建html入口文件，比如单页面可以生成一个html文件入口，配置N个html-webpack-plugin可以生成N个页面入口。（就是把所有js里的东西管理到html里去）（配置N个html-webpack-plugin就可以构造N个页面里，这就是多页面的关键点之一）
配置json的一些有用属性：
minify: { //压缩HTML文件
      removeComments: true, //移除HTML中的注释
      collapseWhitespace: false, //删除空白符与换行符
      removeAttributeQuotes: true  //去除属性引用
}
inject：向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不经相同。
1、true或者body：所有JavaScript资源插入到body元素的底部
2、head: 所有JavaScript资源插入到head元素中
3、false： 所有静态资源css和JavaScript都不会注入到模板文件中


node - glob模块：
安装：npm install glob 
glob允许以通配符访问文件路径：如：“./*/*.js”
glob.sync("./*/*.js").forEach(function(entry){
	//entry就是所有js文件的路径，是相对路径带./的
})

多入口entry：
module.exports = {
	entry: entries,
}
entries通过glob获取，形式为：
{ 'module/index': './src/module/index/index.js',
  'module/info': './src/module/info/info.js' }
'module/index'和'module/info'都为键名，这是entry对象语法，通过对象语法可以实现多个入口点，这是多页面又一个关键点。



1.安装
npm i webpack webpack-cli -D
npm i webpack-cli -g

2.webpack ./src/index.js -o ./build/index.js --mode-development

3.webpack 5个核心
    entry: './src/index.js', // 入口
    output: {
        filename: "built.js",
        path: resolve(__dirname, 'build')
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                use: [
                    'style-loader',
                    'css-loader'
                ]
            }
        ]
    },
    plugins: [],
    mode: 'development'


4.html-webpack-plugin
npm i html-webpack-plugin -D
const HtmlWebpackPlugin = require('html-webpack-plugin')
plugins: [
        // html-webpack-plugin默认会创建一个空html文件
        // 自动引入打包输出的所有资源（js/css）
        new HtmlWebpackPlugin({
            template: './src/index.html'
        })
]
压缩：
minify: {
                collapseWhitespace: true,
                removeComments: true
            }


5.打包图片
npm i url-loader file-loader -D
{
   test: /\.(jpg|png|gif)$/,
   loader: 'url-loader',
   options: {
      // 图片小于8k被处理为base64
      limit: 8*1024
    }
}
html-withimg-loader处理<img>的图片
{
                test: /\.(jpg|png|gif)$/,
                loader: 'url-loader',
                options: {
                    // 图片小于8k被处理为base64
                    limit: 8*1024,
                    esModule: false // 关闭url-loader的es6　模块，使用commonjs
                    name: '[hash:10].[ext]' // 取hash前10位
                }
            },
            {
                test: /\.html$/,
                use: [
                    'html-withimg-loader'
                ]
            }

5.devServer
// 只在内存中打包
// 安装devServer: webpack-dev-server(npm i webpack-dev-server -D)
//运行：npx webpack-dev-server
    devServer: {
        contentBase: resolve(__dirname, 'build'),
        compress: true,
        port: 3000,
        open: true
    }


6.其它资源打包
{
                // 其它资源
                exclude: /.(html|js|css|less|jpg|png|jpg|gif)/,
                loader: 'file-loader',
                options: {
                    name: '[hash:10].[ext]'
                }
            }


7.单独打包css
npm i mini-css-extract-plugin -d
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
rules: [
            {
                test: /\.css$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    'css-loader'
                ]
            }
]
plugins: [
        new MiniCssExtractPlugin({
            filename: 'css/index.css'
        })
    ]
Css兼容性处理：
npm i postcss-loader postcss-preset-env -D
// 设置环境变量
process.env.NODE_ENV = 'development'
{
                test: /\.css$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    {
                        loader: 'postcss-loader',
                        options: {
                            ident: 'postcss',
                            plugins:() => {
                                require('postcss-preset-env')
                            }
                        }
                    }
                ]
            }

package.json:
"browserslist": {
    "develpoment": [
      ">1%"
    ],
    "production": [
      ">1%"
    ]
  }
压缩css:
npm i optimize-css-assets-webpack-plugin -D

plugins: [
        new OptimizeCssAssetsWebpackPlugin()
    ]



8.eslint代码检查
eslint  eslint-loader eslint-config-airbnb-base eslint-plugin-import
npm i eslint-loader eslint-config-airbnb-base eslint-plugin-import -D
{
                test: /\.js$/,
                loader: 'eslint-loader',
		enforce: 'pre',            // 强制loader先执行
                exclude: /node_modules/,
                options: {
                    fix: true // 自动修复
                }
            }
package.json:
"eslintConfig": {
    "extends": "airbnb-base"
  }
// eslint-disable-next-line 可以忽略检查
方案1:js兼容，babel-loader
npm i babel-loader @babel/preset-env @babel/core -D
{
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                options: {
                    presets: ['@babel/preset-env'] // @babel/preset-env只能处理简单的语法
                }
            }
方案2:全部js兼容处理：@babel/polyfill
npm install --save @babel/polyfill
在index.js中:
import '@babel/polyfill'
// 问题：将所有兼容代码全部引入，体积太大了
方案3:Core-js按需加载（推荐）（用方案3，就不要用方案2了）
	{
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                options: {
                    presets: [
                        [
                            '@babel/preset-env',
                            {
                                useBuiltIns: 'usage',
                                corejs: {
                                    version: 3
                                },
                                targets: {
                                    chrome: '60',
                                    ie: '9'
                                }
                            }
                        ]
                    ]
                }
            }



9.HMR热更新
HMR在style-loader有默认实现
js: 默认不能使用HMR,需要添加代码，只能处理非入口文件
devServer: {
        hot: true
    }


10，sourceMap
sourceMap就是一个文件，里面储存着位置信息。
仔细点说，这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。
提供构建后代码，通过映射可以追踪源代码错误
source-map: 外部
Inline-source-map: 内联
eval-source-map：外部 原始源代码
cheap-source-map：外部 转换过的代码（仅限行）
cheap-module-source-map 外部 原始源代码（仅限行）
速度快：eval > inline > cheap
调试更友好：source-map > cheap-module-source-map > cheap-source-map
综上：eval-source-map最好

hidden-source-map只隐藏源代码
nosources-source-map 全部隐藏

vue-cli脚手架搭建的工程，开发环境使用的是eval-source-map，生产环境用的是source-map

11.oneOf
// 以下loader只会匹配一个，提高构建速度，不用每个loader都去过一边
rules: [
    oneOf: []
]


12.缓存
babel缓存:
    cacheDirectory: true
    第二次会读取之前的缓存
hash值：
    每次webpack构建会生产一个唯一hash值
trunkhash:
    根据chunk生成的hash值。
    chunkhash根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。在生产环境里把一些公共库和程序入口文件区分开，单独打包构建，接着我们采用chunkhash的方式生成哈希值，那么只要我们不改动公共库的代码，就可以保证其哈希值不会受影响。
    同一个模块，就算将js和css分离，其哈希值也是相同的，修改一处，js和css哈希值都会变
Contenthash:
   根据文件内容生产hash值
   output: {
        filename: "js/index.[contenthash:10].js",
        path: resolve(__dirname, 'build')
    },

    new MiniCssExtractPlugin({
        filename: 'index.[contenthash:10].css'
    }),




13.tree shaking
去除不引用的代码
js前提：必须使用es6模块化,开启production，会自动使用tree shaking

"sideEffects": false 所有代码没有副作用
"sideEffects": ["*.css", "*.less"] // 不去除css, less



14.code split 代码分割
使用webpack配置：
plugins: [],
optimization: {
        splitChunks: {
            chunks: 'all'
        }
}
使用import:
import(/* webpackChunkName: 'print' */'./print').then(res => {
    console.log(res)
}).catch(() => {

})



15.懒加载
在使用的地方
import(/* webpackChunkName: 'print', webpackPrefetch: true */'./print').then(res => {
    console.log(res)
}).catch(() => {

})
webpackPrefetch: true 预加载，会在使用之前，提前加载，等待其它资源加载完毕，浏览器空闲了，再偷偷加载。预加载慎用



16.PWA
npm i workbox-webpack-plugin -D
const WorkBoxPlugin = require('workbox-webpack-plugin')
plugins添加配置：
new WorkBoxPlugin.GenerateSW({
            clientsClaim: true, // 新的 Service Worker 被激活后使其立即获得页面控制权
            skipWaiting: true // 强制等待中的 Service Worker 被激活
        })

在主入口文件index.js，注册serviceworker
// 注册serviceworker
// 处理兼容问题
if('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js')
            .then(() => {
                console.log('sw注册成功！')
            })
    })
}
注意：Service Worker脚本除了域名为 localhost时能运行在http协议下以外，只能运行https协议下。

使用服务器测试：
npm i serve -g
serve -s build
访问页面，把网络调为offline

PWA原理：
PWA 借助 Service Worker 缓存网站的静态资源，甚至是网络请求，使网站在离线时也能访问。并且我们能够为网站指定一个图标添加在手机桌面，实现点击桌面图标即可访问网站。
Web App Manifest 是一个 JSON 文件，它用来定义网站添加到桌面的图标以及从桌面图标进入网站时的一系列行为，如：启动样式，全屏主题等。
<link rel=manifest href=/manifest.json>





17.多线程打包
npm i thread-loader -D
{
    test: /\.js$/,
    exclude: /node_modules/,
    use: [
        {
           loader: 'thread-loader',
           options: {
                workers: 2
           }
        },
        {
           loader: 'babel-loader',
           options: {}
        }
}



18. externals
plugins:[],
externals: { // 不打包什么文件
        jquery: 'jQuery' // 这个包名要写对
    }
使用script方式直接引入时使用这种方式


19.dll
创建webpack.dll.js
const { resolve } = require('path')
const webpack = require('webpack')
plugins: [
        // 使用dll，对某些库进行单独打包
        // 打包生产一个manifest.json --> 提供和jquery映射
        new webpack.DllPlugin({
            name: '[name]_[hash]',
            path: resolve(__dirname, 'dll/manifest.json')
        })
    ]

webpack --config webpack.dll.js
会在dll目录下生成manifest.json文件，相应的库也会打包为单独的文件

webpack.DllReferencePlugin:
// 告诉哪些包不参与打印
        new webpack.DllReferencePlugin({
            manifest: resolve(__dirname, 'dll/manifest.json')
        }),
        // 将某个文件打包输出，并在html中自动引入改资源
        new AddAssetHtmlWebpackPlugin({
            filepath: resolve(__dirname, 'dll/js/jquery.js')
        })
打包后jquery会独立出来，并切html中会引入jquery





20.webpack配置详解
中文文档
https://www.webpackjs.com/concepts/
1）entry
module.exports = {
    entry: ['./src/index.js', './src/index.html']
}
// entry入口点
//entry:'./src/index.js' 打包形成一个chunk，输出一个bundle文件，单入口
//entry: {index: './src/index.js', index2: './src/index2.js'},多入口,
//entry: ['./src/index.js', './src/index2.js'] 只会形成一个chunk输出一个文件，多入口{}和[]可以同时使用

2）output 
 // 文件名
 filename: "js/index.[contenthash:10].js",
 // 输出文件目录
 path: resolve(__dirname, 'dll'),
 // 所有公共资源引入公共路径前缀
 publicPath: "/"
 chunkFilename: "js/[name]_chunk.js" // 非入口chunk的名称
 // libraryTarget: "window", // 变量名添加到window上
 library: '[name]_[hash]', // 整个库向外暴露的变量名
 libraryTarget: "global" // 变量名添加到node上

3)module
const { resolve } = require('path')
rules: [
  // loader配置
  {
    test: /\.css$/,
    use: [] // 多个loader
    loader: 'xxx-loader', // 单个loader
    // 排除其它资源
    exclude: /.(html|js|css|less|jpg|png|jpg|gif)/,
    include: reslove(__dirname, 'src'), // 只检查src下的js文件
    enforce: pre,// post // 优先执行
    options: {}
  }
]

4）resolve
// 解析模块的规则
    resolve: {
        // 解析模块路径别名, 优点简写路径，确定没有代码提示
        alias: {
            $css: resolve(__dirname, 'src/css') // import '$css/index.css'
        },
        // 配置省略文件路径的后缀，帮助省略后缀名
        extensions: ['.js', '.jsx', '.css'], // import '$css/index'相当于import '$css/index.css'
        // 告诉webpack解析模块去哪里找, 默认会一层一层往外找
        modules: [resolve(__dirname, '../../node_modules'), 'node_modules']
    }

5）devServer
    devServer: {
        // 运行代码的目录
        contentBase: resolve(__dirname, 'build'),
        // 监视contentBase目录下的所有文件，一旦文件变化就reload
        watchContentBase: true,
        // 开启压缩
        compress: true,
        port: 3000,
        // 自动打开浏览器
        open: true,
        // 开启HMR
        hot: true,
        // 不要显示启动服务日志
        clientLogLevel: 'none',
        // 除了一些基本启动信息以外，其它内容不显示
        quiet: true,
        // 出错，不要全屏提示
        overlay: false,
        // 服务器代理
        proxy: {
            '/api': {
                target: 'http://192.168.11.216',
                // 路径重写，将/api/xxx --> /xxx(去掉/api)
                pathRewrite: {
                    '^/api': ''
                }
            }
        }
    }

6)optimization
在生产环境使用
mode: 'production'
optimization: {
        splitChunks: {
            chunks: 'all',
            minSize: 30 * 1024,
            maxSize: 0, // 最大没有限制
            minChunks: 1, // 要提取chunk最少被引用一次
            maxAsyncRequests: 5, // 按需加载并行加载文件最大数量
            maxInitialRequests: 3, // 入口js文件最大并行请求数量
            automaticNameDelimiter: '~', // 名称链接符
            name: true, // 可以使用命名规则
            cacheGroups: {
                // 分割chunk组
                // node_modules文件会被打包到vendors组的chunk中，vendors~xxx.js
                // 满足上面的公共规则，如：大小超过30kb,至少被引用一次
                vendors: {
                    test: /[\\/]node_modules[\\/]/,
                    // 优先级
                    priority: -10
                },
                default: {
                    minChunks: 2,
                    // 优先级
                    priority: -20,
                    // 如果当前要打包的模块，和之前已尽被提取的模块是同一个，就会复用，而不是重新打包模块
                    reuseExistingChunk: true
                }
            }
        },
        // 将当前模块的记录其它模块的hash单独打包为一个runtime
        // 解决：修改a文件导致b文件的contenthash变化
        runtimeChunk: {
            name: entrypoint => `runtime-${entrypoint.name}`
        },
        minimizer: [
            new TerserWebpackPlugin({
                cache: true,
                parallel: true,
                sourceMap: true
            })
        ]
    }






21.vue-cli3 webpack配置
https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE
https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F
拿到webpack配置：
vue inspect > output.js // 拿到解析好的 webpack 配置
vue inspect --mode development >> webpack.config.development.js
vue inspect --mode production >> webpack.config.production.js

productionSourceMap: false, 打包时取消SourceMap





22.webpack 5
https://github.com/webpack/changelog-v5 // 对比webpack4的更改









