横向扩展是已扩展服务器的数量进行高并发的处理(增强处理业务的能力)
纵向扩展，是增加单机的处理能力，一般增加cpu的处理能力

查看mysql状态：ps aux|grep mysql      ps aux|grep mysqld
mkdir /usr/local/msyql
useradd -r -g mysql mysql

检查是否安装了 libaio
# rpm -qa | grep libaio

tar -zxvf mysql-xxxxx.glic.xxx//解压
mv mysql.xxxx.glic.xxx mysql //改名
cd mysql
Vim /etc/my.cnf
[mysql] 
# 设置mysql客户端默认字符集 
default-character-set=utf8  
socket=/var/lib/mysql/mysql.sock 

[mysqld] 
#skip-name-resolve 
#设置3306端口 
port = 3306  
socket=/var/lib/mysql/mysql.sock 
# 设置mysql的安装目录 
basedir=/usr/local/mysql 
# 设置mysql数据库的数据的存放目录 
datadir=/usr/local/mysql/data 
# 允许最大连接数 
max_connections=200 
# 服务端使用的字符集默认为8比特编码的latin1字符集 
character-set-server=utf8 
# 创建新表时将使用的默认存储引擎 
default-storage-engine=INNODB 
#lower_case_table_name=1 
max_allowed_packet=16M


在mysql文件夹下：
mkdir data
创建文件夹：
mkdir /var/lib/mysql
chmod 777 /var/lib/mysql

创建mysql用户组：
groupadd mysql
添加mysql用户：
useradd -r -g mysql mysql
检查mysql组：
more /etc/group | grep mysql
检查mysql所属用户
groups mysql
更改mysql文件目录所有者：
chown -R mysql:mysql mysql/

初始化mysqld：(mysqld 是服务端程序 ,mysql是命令行客户端程序 )
./bin/mysqld --initialize --user=mysql
（mysql5.6 ./scripts/mysql_install_db  --user=mysql）
（--basedir=/usr/local/mysql --datadir=/usr/local/mysql/data）
(
	可能问题：libaio.so.1: cannot open shared object file，解决方法缺少安装包libaio和libaio-devel.命令行yum install libaio*。（apt-get install libaio*）自动安装这两个包.
	5.6可能问题：please install the following Perl modules，安装autoconf库，yum -y install autoconf
)
会有一行：
2018-06-01T02:10:16.805014Z 1 [Note] A temporary password is generated for root@localhost: -;PRuEYe<7h8  gysQ5dRwr6/j q=rreO+oO8J=
-;PRuEYe<7h8是初始的随机密码。n8ytiU?/pl(<

设置开机启动：
1.复制启动脚本 cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
2.增加mysqld服务控制脚本执行权限 chmod +x /etc/rc.d/init.d/mysqld 
3.增加mysqld服务到系统服务  chkconfig --add mysqld
4.检查mysqld服务是否生效 chkconfig --list mysqld
出现以下则，正常了：
mysqld         	0:off	1:off	2:on	3:on	4:on	5:on	6:off
(ubuntu下:cp ./support-files/mysql.server /etc/init.d/mysqld
update-rc.d -f mysql.server defaults
update-rc.d -f mysql.server remove  //移除开机自启动
service mysqld start 启动mysql
)

启动mysqld
错误：
'/var/lib/mysql' for UNIX socket file don't exists.
 ERROR! The server quit without updating PID file (/usr/local/mysql/data/cdh225.pid).
(查看data下的err日志，定位具体错误原因)

在/var/lib下创建mysql目录
mkdir /var/lib/mysql
更改权限 chmod 777 /var/lib/mysql

再次service mysqld start
SUCCESS!

测试登陆：
mysql -u root -p（mysql5.6 不需要密码，直接就登陆了）
初始密码为：上面mysqld --initialize时root@localhost:后的随机字符串。
登上后，请修改密码：
set password = password("uestc@123456");(修改当前密码)

mysql -u root -p登录错误：
请把mysql整个chown给mysql用户
 2002 Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
 建立一个软连接：
ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock

运行远程登录：
grant all privileges on *.* to root@'%' identified by 'uestc@123456';
flush privileges;

新建用户：
 create user 'cddw'@'%' identified by 'uestc@123' 'uestc@111' 'kdum@123456';
 create user 'sccddw'@'%' identified by 'sccddw';
授权：
grant select on XS.* to 'cddw'@'%';//对数据库XS只有select权限
grant select,insert,update,delete on EHome.* to 'cddw'@'%';
grant all privileges on EHome.* to 'cddw'@'%';
取消权限：
revoke all on *.* from 'cddw'@'%';

Mysql5.7user表没有password字段了，改为authentication_string

开启防火墙端口：
firewall-cmd --zone=public --add-port=3306/tcp --permanent

显示数据目录：show variables like "datadir";
查看：max_allowed_packet  show variables like '%max_allowed_packet%';

(
	普通用户无法用密码在localhost登录：
		SELECT User, Host, Password FROM mysql.user;
	    1、删除匿名用户：drop user ''@'localhost';(把无密码的用户都删除了吧, delete from mysql.user where password='')
		2、update user set host='%' where user='sccddw';
		   GRANT ALL ON xizang.* TO 'sccddw'@'localhost' IDENTIFIED BY'sccddw';
)


-------------------------------------主备配置-------------------------------------------
mysql主:
添加配置：
[mysqld]
log-bin=mysql-bin
binlog-do-db=xizang （要备份的数据库）
server-id=1
binlog-format=mixed
binlog-ignore-db=mysql
创建备份账号：
mysql>grant replication slave on *.* to 'repl'@'10.11.17.10' identified by 'repl@123456';
查看master状态：
show master status;
（记下，File，Position）

备：
[mysqld]
server-id=2
log-bin=mysql-bin
binlog-format=mixed
log-slave-updates=1

mysql>change master to master_host='10.11.17.8',master_port=33306,master_user='repl',master_password='repl@123456',master_log_file='mysql-bin.000002,master_log_pos=407;

start slave;
show slave status;
是否成功：
Slave_IO_Running=Yes
Slave_SQL_Running=Yes

关闭从复制：
stop slave;
Reset slave;

	




-----------------------------------Mac 安装mysql---------------------------------------
1.官网下载mysql.dmg
2.点击安装，中途弹出框，记下初始root密码。
3.安装完成后在，系统偏好设置里，一般是最后一排可以看见mysql的图标，点击，再点击运行起mysql server.
4.>mysql -u root -p登录
5.set  password = password("123456");//修改密码
6.flush privileges;



----------------------------------mysql cluster安装：----------------------------------
下载mysql-cluster-gpl-7.6.6-linux-glibc2.12-x86_64.tar.gz
三种节点: 1)管理节点: 管理cluster内其他节点; 包括启动,停止, 备份,配置等; 
　　　　　　　　　　　　在启动其他节点前需要先启动管理节点
　　　　　　　　　　　　管理节点不应是一台,否则如果宕机会导致集群不可用
　　　　　　 2)数据节点: 保存cluster数据, 
　　　　　　　　　　　　如果有两个副本,每个副本有两个片段,那么就有4个数据节点,依此类推
　　　　　　 3)sql节点: 用于访问cluster中数据
默认端口:
管理节点: 1186
数据节点: 2202
(Netstat -anp|grep 1186,2202)

卸载已经安装的mysql:
查看是否已安装mysql: rpm -qa | grep mysql(什么都没例出则说明没有装)
查看服务状态: service mysql status
关闭当前sql服务: /etc/init.d/mysqld stop（service mysqld stop）
查看进程是否关闭: ps -ef | grep mysql(多于一条才可以，因为有一条是ps这条命令的进程)
卸载已安装的mysql: rpm -e --allmatches --nodeps mysql mysql-server
删除相关目录: rm -rf /usr/local/mysql
              rm -rf /var/mysql
              rm -rf /var/lib/mysql

解压：tar -zxvf mysql-cluster-gpl-7.6.6-linux-glibc2.12-x86_64.tar.gz
重命名文件夹: mv mysql-cluster-gpl-7.3.4-linux-glibc2.5-i686 mysql(一定要是mysql)

添加mysql用户和组，这是必需的。
groupadd mysql
useradd -g mysql mysql
更改文件或文件夹所有者: chown mysql:mysql mysql(mysql: mysql中前面为用户,后面为组)

先把 /etc/my.cnf  备份
#mv /etc/my.cnf /etc/my.cnf.bak

新建配置文件并且初始化管理节
创建文件夹: mkdir /var/lib/mysql-cluster
然后：mkdir /var/lib/mysql-cluster/data
# chown root:mysql /var/lib/mysql-cluster
vi /usr/local/mysql/config.ini
[ndbd default]
NoOfReplicas=2                           #每个数据节点的镜像数量，通常最低设置为2，否则就没有意义了
DataMemory=100M                    #每个数据节点中给数据分配的内存，注意：mysql-cluster内存开销极大，占用为DataMemory2倍
IndexMemory=18M                   #每个数据节点中给索引分配的内存   ,7.6版本中的已经改名了
[ndb_mgmd]
HostName=192.168.5.114.             #管理节点ip
DataDir=/var/lib/mysql-cluster.     #管理节点数据目录,存放相关日志，以及pid文件
[ndbd]
HostName=192.168.5.114              #数据节点ip地址
DataDir=/usr/local/mysql/data      #NDB点数据存放目录
[ndbd]
HostName=192.168.5.115
DataDir=/usr/local/mysql/data
[mysqld]
HostName=192.168.5.114          #SQL节点ip地址
[mysqld]
HostName=192.168.5.115          #SQL节点ip地址
[mysqld]			#最后最好多写一个，不然在启动数据节点后报错:No free node id found 

for ndbd(NDB).
（nodeid可以配置各个节点的ID，不配置系统自动分配）

启动管理节点：
./bin/ndb_mgmd -f config.ini  --initial   #第一次启动加—initial参数，以后修改了config.ini 加—-reload
(可能会提示locked by pid=xxx,kill掉重新执行，kill -9 xxx)
# ./bin/ndb_mgmd  -f  config.ini     #正常启动方式
# ./bin/ndb_mgm                #进入管理程序，可以看到配置文件生效了，但因为没配置节点上的mysql,所以这里显示未连接
ndb_mgm> show
关闭管理节点
ndb_mgm> shutdown

安装配置数据节点和mysql节点
每个节点执行
# groupadd mysql
# useradd -g mysql
# mkdir /var/lib/mysql-cluster
# chown root:mysql /var/lib/mysql-cluster
# tar -zxvf mysql-cluster-gpl-7.6.6-linux-glibc2.12-x86_64.tar.gz
#mv mysql-cluster-gpl-7.3.4-linux-glibc2.5-i686 mysql
进入刚才的目录下
# cd /usr/local/mysql
配置数据节点
# vi /etc/my.cnf
[mysqld]
character_set_server=utf8
default-storage-engine=ndbcluster
ndbcluster
ndb-connectstring=192.168.5.114
[mysql_cluster]
ndb-connectstring=192.168.5.114

#./bin/mysqld --initialize
(初始化后修改data目录权限chown -R mysql:mysql data)
(查看mysqld 状态ps -ef | grep mysqld，kill -9启动的进程,除了--color=auto mysqld以外其它都kill掉)
如果初始化成功之后，系统会提示一个随机生成的数据库密码，此时需要记住这个密码，之后登录数据库需要使用这个密码！！！
----添加启动脚步----
# cp support-files/mysql.server /etc/rc.d/init.d/mysqld
# chmod +x /etc/rc.d/init.d/mysqld
# chkconfig --add mysqld
启动：service mysqld start
问题：start the mysql.logging to /usr/local/mysql/data/master.err
把mysql,chown -R mysql:mysql mysql/
修改密码： 
#bin/mysql -u root -p ('I>ttslve=75P' (2kyf_-d:ldiJ))=6lGl?/ZHeq>      82=fbhE9ooPy
mysql>use mysql;
mysql> set password=password("root");
mysql>flush privileges;
mysql>quit;
问题：error 1045 (28000):access denied for
解决：vi /etc/mycnf 
在[mysqld]下面添加skip-grant-tables，保存退出
密码修改后，将这行去掉。


初始化数据节点：
./bin/ndbd –-initial
正常启动方式
./bin/ndbd
查看 ndbd 启动状态
# ps -ef | grep ndbd
root      3209     1  0 07:35 ?        00:00:00 ndbd --initial
root      3210  3209 13 07:35 ?        00:00:02 ndbd --initial
root      3253  2936  0 07:36 pts/0    00:00:00 grep --color=auto ndbd

去到192.168.5.114（管理节点）
#./bin/ndb_mgm

启动需要按照如下顺序进行：
Management Node > Data Node > SQL Node
# ./bin/ndb_mgmd  -f  config.ini
#service mysqld start
#./bin/ndbd --initial(网上又说不用加initial，可不加./bin/ndbd又会莫名其妙退出)
# ./bin/ndb_mgm

 
停止顺需要按照如下顺序进行
SQL Node  > Data Node > Management Node
(1) SQL节点：service mysqld stop 
(2) 数据节点：./bin/ndbd stop 
(3) 管理节点：./bin/ndb_mgm -e shutdown


测试：
从192.168.5.115数据节点登陆MYSQL
#./bin/mysql –u root -p 
mysql>create database zwjtest;
问题：ERROR 1820 (HY000): You must SET PASSWORD before executing this statement
解决：set password=password("root");
mysql>create table zwj_test (id varchar(30), name varchar(30)) engine=ndbcluster;#指定数据库表的引擎为NDB，否则同步失败; 
mysql> insert into zwj_test values(‘abc’, ‘zwj’);
从192.168.5.114数据节点登陆MYSQL查看：
#./bin/mysql –u root -p
mysql>show databases;(可以看到zwjtest);
myslq>use zwjtest;
mysql>show tables;(可以看到zwj_test);
在管理节点：
ndb_mgm>all report memoryusage;

./bin/ndb_desc -c 10.115.246.220 -d test_ndb test_table_ndb -p  //查看数据在节点上的分布情况
(-c 管理节点ip,-d数据库名，test_table_ndb为表名，-p输出分区详细信息)
(可以看到数据几乎是均匀分布在各个节点的)
(分片规则：hash:均匀，联合主键时默认按照多个主键hash分片，可指定按其中一个主键分片)

修改mysql密码统一，修改mysql的访问权限，使外部ip能远程访问mysql.
然后创建在一台上面创建数据库，看另一台是否被同步，然后创建表，然后新增删除等等.
唯一需要注意的是，创建表的时候必须选择表的引擎为NDBCLUSTER，否则表不会进行同步.


---------------------------------- 图形界面部署---------------------------------------------
./bin/ndb_setup.py -N 10.115.246.220 -p 8888
打开相应的网页http://10.115.246.220:8888
直接通过界面配置


---------------------------------------Jdbc连接集群-----------------------------------
Jdbc:mysql:loadbalance://10.115.246.220:3306,10.115.246.225:3306/test_ndb?roundRobinLoadBalance=true
(test_ndb为数据库名，均衡算法为roundRobin:轮询调度算法，把请求依次询问各个服务器)





--------------------------------mysql使用知识----------------------------------------------
1.无法插入中文数据
show variables like 'character%';//查看全部编码
show variables like 'character_set_database';//查看数据库编码
如果是Latin字符集，请修改为utf-8
alter database <数据库名> character set utf8;
如果只修改单个表：
alter table <表名> character set utf8;
或
修改mysql 安装目录下的 my.ini 文件在[mysqld]添加：
character-set-server=utf8



2.utf-8无法导入中文的话，试下，在导入的时候设置为GB18030
GBK和GB2312 都是16位的，GBK支持简体中文和繁体中文，而GB2312只支持简体中文，GBK里面包含了GB2312，用GBK比较多;GB18030是32位的，它支持简体中文、繁体中文 藏文、蒙文、维吾尔文等主要的少数民族文字，包含GBK和GB2312也就是说从GB2312（1980年）、GBK（1995年）到GB18030（2000年），这些编码方法是向下兼容的.



3.utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。 Utf8 只能支持 1~3 个字节的字符.
采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题。



4.添加索引
索引定义：是帮助MySQL高效获取数据的数据结构。
alter table VIEW_DEV_DNB_FULL ADD INDEX index_CJ_MP_ID(CJ_MP_ID);
alter table VIEW_DEV_DNB_FULL ADD INDEX index_CJ_MP_ID_ TYPE_CODE(CJ_MP_ID,TYPE_CODE); 组合索引
索引的类型：
	UNIQUE(唯一索引)：不可以出现相同的值，可以有NULL值
	INDEX(普通索引)：允许出现相同的索引内容
	PROMARY KEY(主键索引)：不允许出现相同的值
	fulltext index(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维
查看索引：
	show index from table_name（表名）

删除索引：
	drop index index_CJ_MP_ID on VIEW_DEV_DNB_FULL;

检测语句是否走索引：
	Explain select * from user where id=1;
结构解释：
  type:ALL：遍历全表;index：遍历全索引树;range:索引范围扫描，between或者where子句里带有<, >;ref：使用非唯一索引扫描或者唯一索引的前缀扫描；eq_ref：类似ref，区别就在使用的索引是唯一索引；
  possible_keys:查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用
  key:显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL
  key_len:表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度
  ref:表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值
  rows:表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数

Hash 索引仅仅能满足"=","IN"和"<=>"的等值查询，不能使用范围查询。 
InnoDB其冲突机制采用链表方式，哈希函数采用除法散列方式

B+TREE索引
BTREE平衡查找树
二叉查找树(BST)
左子树的键值小于根的键值，右子树的键值大于根的键值。 
平衡二叉树（AVL）
在符合二叉查找树的条件下,满足任何节点的两个子树的高度最大差为1
B+Tree是B树的变种，有着比B树更高的查询性能，来看下m阶B+Tree特征：
1、有m个子树的节点包含有m个元素（B-Tree中是m-1）
2、根节点和分支节点中不保存数据，只用于索引，所有数据都保存在叶子节点中。
3、所有分支节点和根节点都同时存在于子节点中，在子节点元素中是最大或者最小的元素。
4、叶子节点会包含所有的关键字，以及指向数据记录的指针，并且叶子节点本身是根据关键字的大小从小到大顺序链接。
对于字符串的数据建立b+tree树时，英文字符的ASCII码作为比较准则。
https://blog.csdn.net/u013967628/article/details/84305511（varchar如何建立索引）
InnoDB的所有辅助索引都引用主键作为data域。所依辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。
InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。所以InnoDB要求表必须有主键。
	  如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。
InnoDB的数据文件本身就是索引文件。MyISAM索引文件和数据文件是分离的。

聚簇索引：将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据。
		  聚簇索引具有唯一性，由于聚簇索引是将数据跟索引结构放到一块，因此一个表仅有一个聚簇索引。
		  聚簇索引默认是主键。
非聚簇索引：将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置。

倒排索引：
倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。
由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。
带有倒排索引的文件我们称为倒排索引文件，简称倒排文件(inverted file)。

组合索引：一个索引，创建一个树，也只能创建一个树，不管是单列，还是多列联合。
	      先对第一个字段进行b+tree建立，再对第二个字段排序，再对第三个排序，以此类推。



5.count(1)
1并不是表示第一个字段，而是表示一个固定值。 
其实就可以想成表中有这么一个字段，这个字段就是固定值1，count(1)，就是计算一共有多少个1.
同理count(20000)也一样。



6.select list is not in group by clause this is incompatible only_full_group_by
[mysqld]下
sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION



7.两个mysql之间数据迁移
两边的mysql要先停掉
需要拷贝mysql等数据目录下的:
ibdata1(表空间)
XS/(数据库数据目录，如：数据库名为XS)
ib_logfile0
ib_logfile1
启动mysql：service mysqld start
如果出现：the server quit without updating pid file .....
请把你刚拷贝进来的数据的所有者给mysql:
执行：chown -R mysql:mysql mysql/



8.视图
视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。作为一个select语句保存在数据字典中的。
使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。
create view v_name as select xxx from xxx where xxx;



9.query_cache_type
查询缓存情况：SHOW VARIABLES LIKE '%query_cache%';
如果query_cache_type为OFF说明缓存是关闭的。
开启mysqlquery_cache
在[mysqld]下添加：
query_cache_size=128M 
query_cache_type=1 
设置为0，OFF,缓存禁用
设置为1，ON,缓存所有的结果
设置为2，DENAND,只缓存在select语句中通过SQL_CACHE指定需要缓存的查询
注意：MySQL的query cache大部分情况下其实只是鸡肋而已，建议全面禁用。



10.group by 1055
only_full_group_by 这个模式是默认开启的导致出错的。
在[mysqld] 下添加
sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION



11.mysql join默认为inner join



12.group by分组后获得每组中时间最大的那条记录
SELECT t.* FROM (select * from `AIR_DATA` order by `create_time` desc limit 10) t GROUP BY t.device_id;
GROUP BY没有排序功能,需要添加limit 10让数据进行排序。



13.FROM DUAL where not exists判断数据是否存在
insert into USER_DEVICE(user_id,device_id,device_name,device_position) values(?,?,?,?) FROM DUAL where not exists(SELECT count(1) from USER_DEVICE where user_id = ? and device_id = ? );



14.mysql大小写问题
默认mysql字段不区分大小写
设置字符集：
utf8_general_ci --不区分大小写
utf8_bin--区分大小写



15.mysql定时备份到本地（centos）
1)创建文件夹存放备份文件
mkdir /usr/local/mysqlbackup/EHome
2)创建备份脚本
Cd /usr/local/mysqlbackup
vi back.sh
#!/bin/sh
/usr/local/mysql/bin/mysqldump -h 39.98.182.112 -uroot -puestc@123456 EHome --opt -Q -R --skip-lock-tables > /usr/local/mysqlbackup/EHome/EHome_$(date +%Y%m%d_%H%M%S).sql
rm -rf $(find /usr/local/mysqlbackup/EHome/ -mtime +30 -name "*.sql")
3)创建crontab定时任务
确认已安装crontab
crontab -e
(会出现类似vi的编辑页，输入如下)
0 4 * * * sh /usr/local/mysqlbackup/back.sh
(每天4点执行此脚本)
4)service crond start
注意：source /etc/profile 不能少，否则crontab自动执行时无法保留数据。mysqldump要绝对路径，原因是cron的环境变量中没有mysqldump。crontab配置文件在/etc/crontab。

数据恢复：
mysql -uroot -p Ehome < /home/xxx.sql
恢复所有库：
mysqldump -uroot -p -h 127.0.0.1 --all-databases < /home/db.sql
navicat右键点击运行SQL文件



16.mysqldump参数
-all-databases  , -A
导出全部数据库。
--all-tablespaces  , -Y
导出全部表空间
--no-tablespaces  , -y
不导出任何表空间信息
--databases,  -B
导出多个数据库。参数后面所有名字参量都被看作数据库名，以空格分隔。
--lock-all-tables,  -x
提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁
--quote-names,-Q
使用（`）引起表和列名。
-routines, -R
导出存储过程以及自定义函数。
--opt
该选项是速记；等同于指定 --add-drop-tables--add-locking --create-option --disable-keys--extended-insert --lock-tables --quick --set-charset。它可以给出很快的转储操作并产生一个可以很快装入MySQL服务器的转储文件。该选项默认开启，但可以用--skip-opt禁用.



17.慢查询
查看慢查询是否开启：
show variables like '%slow_query_log%';
+---------------------+------------------------------------------+
| Variable_name       | Value                                    |
+---------------------+------------------------------------------+
| slow_query_log      | OFF                                      |
| slow_query_log_file | /usr/local/mysql/data/localhost-slow.log |
+---------------------+------------------------------------------+
开启慢查询
set global slow_query_log=1;
或修改配置文件：
增加参数
slow_query_log =1
slow_query_log_file=/usr/local/mysql/data/localhost-slow.log



18.DATE_FORMAT('%H%i')
分钟是%i,月才是%m
%d	月的天，数值(00-31)
%H	小时 (00-23)
%h	小时 (01-12)
%I	小时 (01-12)
%i	分钟，数值(00-59)
%M	月名
%m	月，数值(00-12)
%S	秒(00-59)
%s	秒(00-59)
%Y	年，4 位
%y	年，2 位



19.内置函数
NOW() 获取现在时间
CONCAT("1","z1") 字符串拼接

两个日期字段相差大于或小于一定时间：
TIMESTAMPDIFF(‘参数1’,pre_time,later_itme)时间差,返回later_itme - pre_time
参数1:FRAC_SECOND、SECOND、 MINUTE、 HOUR、 DAY、 WEEK、 MONTH、 QUARTER或 YEAR

SUBDATE日期相减：SUBDATE()是DATE_SUB()的同义词
SUBDATE(times,interval -15 minute) //times 15分钟之后的时间

substr(string string,num start,num length);

LENGTH('text')   //字符串长度

LEFT('foobarbar', 5);  //返回字符串str的最左面len个字符

LTRIM(str)  //返回删除了其前置空格字符的字符串str。

REPLACE(str,from_str,to_str) //返回字符串str，其字符串from_str的所有出现由字符串to_str代替。

REVERSE(str)  //返回颠倒字符顺序的字符串str。

DAYNAME(date) 返回date的星期名字
QUARTER(date) 返回date一年中的季度，范围1到4。 
YEAR(date) 返回date的年份
MONTH(date) 返回date的月份，范围1到12。
HOUR(time) 返回time的小时，范围是0到23。
MINUTE(time) 返回time的分钟，范围是0到59。 
SECOND(time) 回来time的秒数，范围是0到59。 
DATE_FORMAT(date,format) 根据format字符串格式化date值。
UNIX_TIMESTAMP(date) 如果没有参数调用，返回一个Unix时间戳记(从'1970-01-01 00:00:00'GMT开始的秒数)。

IF(1>2,1,1)



20.条件判断
if(a = b,"1","2")
注意：等于为=，大于为>，小于为<.


21.存emoji问题
[mysql]  
default-character-set = utf8mb4  

[mysqld]   
character-set-server = utf8mb4 

修改数据库字符集：
ALTER DATABASE EHome CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci; 
修改表的字符集：
ALTER TABLE ARTICLE_COMMENT CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_croatian_ci;
修改字段的字符集：
    ALTER TABLE ARTICLE_COMMENT CHANGE content content VARCHAR(200) CHARACTER SET utf8mb4 COLLATE  utf8mb4_general_ci;
如果提示：
 Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8mb4_croatian_ci,IMPLICIT)
就将
COLLATE改为utf8mb4_croatian_ci



22.时区
show variables like "%time_zone%";
set global time_zone = '+8:00';##修改mysql全局时区为北京时间，即我们所在的东8区
flush privileges;  #立即生效



23.CURRENT_TIMESTAMP修改为不自动更新（只是插入是自动生成当前时间）
alter table SYSTEM_MESSAGE change create_time create_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP;
或者在创建时：
`uptime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP;



24.SQL性能优化的目标：至少要达到range级别，要求是ref级别，如果可以是consts最好。
1）consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。 
 2）ref 指的是使用普通的索引。（normal index） 
 3）range 对索引进行范围检索。 
 4)index，按索引次序扫描，先读索引，再读实际的行,索引物理文件全扫描，速度非常慢，这个index级别比较range还低.
 5)all,全表扫描
explain "xxx"; 返回的结果的type可以看到此优化值。



25.时区修改
set global time_zone = '+8:00';
set time_zone = '+8:00';
flush privileges;



26.mysql 排序分页造成数据重复和丢失
方法1）排序使用主键
方法2）在排序的字段加索引



27.修改ROW_FORMAT
修改配置文件，在[mysqld]下加：
innodb_file_per_table=1 #打开mysql每张表都是独立存储空间的开关。
show variables like '%per_table%'; #检查下上述开关是否打开,为on就是打开
设置mysql全局变量：innodb_file_format = Barracuda（梭鱼）
命令：set GLOBAL innodb_file_format = 'Barracuda';
命令：show GLOBAL VARIABLES LIKE '%file_format%';
设置对应表的属性：ROW_FORMAT=COMPRESSED
通过navicat‘设计表’‘选项’‘行格式’选择‘DYNAMIC’或其它你要的



28.mysql批量插入
批量插入数据量最佳大小是max_allowed_packet的一半，max_allowed_packet会限制server接受的数据包大小。
[mysqld]
max_allowed_packet = 20M
max_allowed_packet的协议限制为1GB，这个值必须是1024的倍数；如果不是1024倍数的值，mysql就会自动四舍五入为最接近的1024的倍数。

通过增大innodb_buffer_pool_size配置提升读写性能，内存很珍贵，所以这个方案在内存富裕，而性能瓶颈的时候，可以考虑下。
因为有额外内存的使用，如果指定 innodb_buffer_pool_size 为 12g 实际占用内存可能是 14g +
设置多大的 innodb_buffer_pool_size 合适？
通常将innodb_buffer_pool_size其配置为物理内存的50％到75％。
 innodb_buffer_pool_instances 的个数设置为 buffer pool size 的 十分之一。
 比如 innodb_buffer_pool_size 是 30g ，那 innodb_buffer_pool_instances 就设置为 3；
  innodb_buffer_pool_instances 的范围是 1 (the default) up to 64 (the maximum)。



29.mysql锁
锁类型：
表级锁（锁定整个表）
页级锁（锁定一页）
行级锁（锁定一行）
共享锁（S锁，MyISAM 叫做读锁）
排他锁（X锁，MyISAM 叫做写锁）
悲观锁（抽象性，不真实存在这个锁）
乐观锁（抽象性，不真实存在这个锁）
GAP锁
间隙锁实质上是对索引前后的间隙上锁，或某一条索引记录之前或者之后加锁，不对索引本身上锁。
根据检索条件向左寻找最靠近检索条件的记录值A，作为左区间，向右寻找最靠近检索条件的记录值B作为右区间，即锁定的间隙为（A，B）。
间隙锁的目的是为了防止幻读，其主要通过两个方面实现这个目的：
（1）防止间隙内有新数据被插入。
（2）防止已存在的数据，更新成间隙内的数

行级锁并不是直接锁记录，而是锁索引。
数据库的增删改操作默认都会加排他锁，而查询不会加任何锁。

共享锁，无法修改。要想修改就必须等所有共享锁都释放完之后：
select * from table lock in share mode
排他锁：对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作
select * from table for update

意向锁（innodb特有）分意向共享锁和意向排他锁。
意向共享锁：表示事务获取行共享锁时，必须先得获取该表的意向共享锁；
意向排他锁：表示事务获取行排他锁时，必须先得获取该表的意向排他锁；
我们知道，如果要对整个表加锁，需保证该表内目前不存在任何锁。
因此，如果需要对整个表加锁，那么就可以根据：检查意向锁是否被占用，来知道表内目前是否存在共享锁或排他锁了。而不需要再一行行地去检查每一行是否被加锁。

Update时，where中的过滤条件列，如果用索引，锁行，无法用索引，锁表。update与delete产生的锁现象是一样的。
insert的时候，可以并发执行，之间并不会相互影响。可以理解为，insert是锁行，而不会锁表。

// 查看隔离级别
select @@global.tx_isolation, @@session.tx_isolation, @@tx_isolation; 
// 查看innodb状态(包含最近的死锁日志)
show engine innodb status;
// 查看事务锁等待状态情况
select * from information_schema.innodb_locks;
select * from information_schema.innodb_lock_waits;
select * from information_schema.innodb_trx;



30.source
mysql>source d:/xxx.sql;







-----------------------------------------mysql配置项--------------------------------------
skip-name-resolve
# 禁止MySQL对外部连接进行DNS解析

back_log = 600
#back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。

max_connections = 1000
# MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下。

max_connect_errors = 6000
# 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。

open_files_limit = 65535
# MySQL打开的文件描述符限制，默认最小1024;

table_open_cache = 128
# MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中。

max_allowed_packet = 4M
# 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。

read_buffer_size = 2M
# MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。
# 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。

sort_buffer_size = 8M
# MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。
# 如果不能，可以尝试增加sort_buffer_size变量的大小

query_cache_limit = 2M
#指定单个查询能够使用的缓冲区大小，默认1M

transaction_isolation = REPEATABLE-READ
# MySQL支持4种事务隔离级别，他们分别是：
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.

query_cache_size = 8M
#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲

query_cache_limit = 2M
#指定单个查询能够使用的缓冲区大小，默认1M

key_buffer_size = 4M
#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，系统将开始换页并且真的变慢了。












