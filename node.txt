package-lock.json的作用：
就是锁定安装时的包的版本号，并且需要上传到git，以保证其他人在npm install时大家的依赖能保证一致。


一、自己写脚手架
# zwj-cli
    自己写脚手架

### 1、第一步
    github创建自己的仓库（用来存放下载的模板）

### 2、第二步
**注册npm账号：**
    [npm](https://www.npmjs.com/)

**登录：** 

    $npm login

**添加用户信息到注册表** 

    $npm adduser

### 3、编码
**初始化**
    创建工程：zwj-cli
    进入然后npm init
**目录结构**
```
>zwj-cli
    |--bin
       |--zwj-cli
    |--lib
       |--list.js
       |--init.js
    |--package.json
    |--README.md
在bin目录下新建 zwj-cli (没有后缀),代码如下
#!/usr/bin/env node
process.env.NODE_PATH = __dirname + '/../node_modules/'

const program = require('commander')

program
  .version(require('../package.json').version)
  .usage('<command> [options]')
program
  .command('list')
  .description('查看所有的模版')
  .alias('l')
  .action(() => {
    require('../lib/list')()
  })
program
  .command('init')
  .description('生成一个新项目')
  .alias('i')
  .action(() => {
    require('../lib/init')()
  })
program
  .parse(process.argv)

if(!program.args.length){
  program.help()
}

lib目录下 init.js，代码如下
const ora = require('ora')
const inquirer = require('inquirer')
const chalk = require('chalk')
const request = require('request')
const download = require('download-git-repo')

module.exports = () => {
  request({
    url: 'https://api.github.com/users/template-organization/repos',
    headers: {
      'User-Agent': 'edu-test-cli'
    }
  }, (err, res, body) =>{
    if (err) {
      console.log(chalk.red('查询模版列表失败'))
      console.log(chalk.red(err))
      process.exit();
    }

    const requestBody = JSON.parse(body)
    if (Array.isArray(requestBody)) {
      let tplNames = [];
      requestBody.forEach(repo => {
        tplNames.push(repo.name);
      })

      let promptList = [
        {
          type: 'list',
          message: '请选择模版',
          name: 'tplName',
          choices: tplNames
        },
        {
          type: 'input',
          message: '请输入项目名字',
          name: 'projectName',
          validate (val) {
            if (val !== '') {
              return true
            }
            return '项目名称不能为空'
          }
        }
      ]
      inquirer.prompt(promptList).then(answers => {

        let ind = requestBody.find(function (ele) {
          return answers.tplName == ele.name;
        });
        let gitUrl = `${ind.full_name}#${ind.default_branch}`,
          defaultUrl = './',
          projectUrl = `${defaultUrl}/${answers.projectName}`,
          spinner = ora('\n 开始生成项目，请等待...');
          spinner.start();
        download(gitUrl, projectUrl, (error)=>{
          spinner.stop();
          if (error) {
            console.log('模版下载失败……')
            console.log(error)
            process.exit()
          }
          console.log(chalk.green(`\n √ ${answers.projectName} 项目生成完毕!`))
          console.log(`\n cd ${answers.projectName} && npm install \n`)
        })
      })
    } else {
      console.error(requestBody.message)
    }
  })
}
lib目录下 list.js，代码如下
const request = require('request');
const chalk = require('chalk')
const ora = require('ora')
module.exports = () => {
  let spinner = ora('\n ' + chalk.yellow('正在查询模版列表，请等待...'));
  spinner.start();
  request({
    url: 'https://api.github.com/users/template-organization/repos',
    headers: {
      'User-Agent': 'edu-test-cli'
    }
  }, (err, res, body) => {
    spinner.stop();
    if (err) {
      console.log(chalk.red('查询模版列表失败'))
      console.log(chalk.red(err))
      process.exit();
    }
    const requestBody = JSON.parse(body)
    if (Array.isArray(requestBody)) {
      console.log()
      console.log(chalk.green('可用的模版列表：'))
      console.log()
      requestBody.forEach(repo => {
        console.log(
        '  ' + chalk.yellow('★') +
        '  ' + chalk.blue(repo.name) +
        ' - ' + repo.description)
      })
    } else {
      console.error(requestBody.message)
    }
  })
}
```
**下载依赖**

    npm i chalk commander download-git-repo inquirer ora request --save

    chalk node终端样式库

    commander 帮助命令行工具的开发
        用于命令行参数开发
        · version
        作用：定义命令程序的版本号
        用法示例：.version('0.0.1', '-v, --version')
        · option
        作用：用于定义命令选项
        用法示例：.option('-n, --name<path>', 'name description', 'default name')
        · command
        作用：添加命令名称
        用法示例：.command('rmdir <dir> [otherDirs...]', 'install description', opts)
        · description
        作用：定义命令的描述
        用法示例：.description('rmdir desc')
        · action
        作用：定义命令的回调函数
        用法示例：.action(fn)
        · parse
        作用：用于解析process.argv，设置options以及触发commands
        用法示例：.parse(process.argv)

    inquirer
        脚手架的时候最明显的就是与命令行的交互，如果想做一个脚手架或者在某些时候要与用户进行交互，这个时候就不得不提到inquirer.js了。
        inquirer为每个问题提供很多参数：
        type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；
        name: 存储当前问题回答的变量；
        message：问题的描述；
        default：默认值；
        choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；
        validate：对用户的回答进行校验；
        filter：对用户的回答进行过滤处理，返回处理后的值；
        transformer：对用户回答的显示效果进行处理(如：修改回答的字体或背景颜色)，但不会影响最终的答案的内容；
        when：根据前面问题的回答，判断当前问题是否需要被回答；
        pageSize：修改某些type类型下的渲染行数；
        prefix：修改message默认前缀；
        suffix：修改message默认后缀。
        inquirer.prompt(promptList).then(answers => {
            console.log(answers); // 返回的结果
        })

    ora 一个优雅的 Node.js 终端加载动画效果

    download-git-repo 下载git仓库
    var download = require('download-git-repo');
    download('git仓库地址', '目录地址', function (err) {
        console.log(err ? 'Error' : 'success')
    })

#### 模版来源    
    创建一个github账号，将所有模版上传到这个仓库下
    使用api.github可以查询这个账号下的全部仓库：
    如要查询zmrzwj账号下全部仓库：
    https://api.github.com/users/zmrzwj/repos

### 开发、测试、发布
```
开发时，可使用以下命令查看效果
node bin/zwj-cli list   查看所有可用的模版
node bin/zwj0cli init   把模版下载下来，作为初始项目进行开发
测试时，如何使用全局的 edu list/init 的命令呢？
npm link    // 只能自己本地使用。
开发、测试完成，发布
npm publish  // 将包发布到npm上，所有人都可以安装使用。

例子：
$ npm publish
+ zwj-cli@1.1.0

安装
npm install -g zwj-cli

查看模版列表
$ zwj-cli list
```



二、镜像设置
设置淘宝镜像
npm config set registry https://registry.npm.taobao.org
取消淘宝镜像
npm config delete registry
命令行指定：
npm --registry https://registry.npm.taobao.org install express




三、package.json 字段说明
字段定义
main : 定义了 npm 包的入口文件，browser 环境和 node 环境均可使用
module : 定义 npm 包的 ESM 规范的入口文件，browser 环境和 node 环境均可使用
browser : 定义 npm 包在 browser 环境下的入口文件

// 名称
  "name": "vue",
  // 版本
  "version": "2.6.10",
  // 描述
  "description": "Reactive, component-oriented view layer for modern web interfaces.",
  // npm包项目的主要入口文件，必须的
  "main": "dist/vue.runtime.common.js",
  // rollup 打包需要的入口文件
  "module": "dist/vue.runtime.esm.js",
  // npm 上所有的文件都开启 cdn 服务地址
  "unpkg": "dist/vue.js",
  // jsdelivr cdn公共库
  "jsdelivr": "dist/vue.js",
  // TypeScript 的入口文件
  "typings": "types/index.d.ts",
  // 当你发布package时，具体那些文件会发布上去
  "files": [
    "src",
    "dist/*.js",
    "types/*.d.ts"
  ],
  // 声明该模块是否包含 sideEffects（副作用），从而可以为 tree-shaking 提供更大的优化空间。
  "sideEffects": false,
  // 定义一个针对 TypeScript 的入口文件
  "types": "build/index.d.ts",
  // type字段的产生用于定义package.json文件和该文件所在目录根目录中.js文件和无拓展名文件的处理方式。值为'moduel'则当作es模块处理；值为'commonjs'则被当作commonJs模块处理。目前node默认的是如果pacakage.json没有定义type字段，则按照commonJs规范处理

  "type": "module"




