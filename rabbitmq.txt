1.先安装erlang
https://www.rabbitmq.com/releases/erlang/
下载：erlang-19.0.4-1.el7.centos.x86_64.rpm
安装erlang:
　　rpm -ivh erlang-19.0.4-1.el7.centos.x86_64.rpm
测试是否安装成功:
	#erl


2.安装rabbitmq
http://www.rabbitmq.com/releases/rabbitmq-server/
下载：rabbitmq-server-3.6.15-1.el7.noarch
安装rabbitmq:
　　　　rpm -ivh rabbitmq-server-3.6.15-1.el7.noarch
提示依赖socat：
yum install socat

启动RabbitMQ  
 启动服务：service rabbitmq-server start
 查看服务状态：service rabbitmq-server status
 关闭服务：service rabbitmq-server stop

增加用户admin，密码admin
 #rabbitmqctl add_user admin admin 
 #rabbitmqctl set_user_tags admin administrator 
 (用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。超级管理员(administrator，可登陆管理控制台)、
 监控者(monitoring，可登陆管理控制台)、策略制定者(policymaker，可登陆管理控制台)、普通管理者(management，仅可登陆管理控制台，无法看到节点信息，
 也无法对策略进行管理),可以给同一用户设置多个角色 )
 
 设置用户权限
 #rabbitmqctl  set_permissions  -p  /  admin  '.*' '.*' '.*'
 
开启web UI:
 #rabbitmq-plugins enable rabbitmq_management
 关闭防火墙：systemctl stop firewalld.service
 访问：http://192.168.11.206:15672/
 账号和密码默认都是guest
 【注意：】账号guest和密码guest是无法访问的，需要自己添加一个用户，并且授予所有的权限
 修改配置文件：/etc/rabbitmq/
 cd /etc/rabbitmq/
 vim rabbitmq.config
 想让guest用户能够远程访问的话:
 [{rabbit, [{loopback_users, []}]}].
 新添加的用户，直接就可以从远程访问的;如果想让新添加的用户只能本地访问，可以将用户名添加到上面的列表:
 [{rabbit, [{loopback_users, ["admin"]}]}].
 
 springboot连接:
    <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
     #对于rabbitMQ的支持
    spring.rabbitmq.host=127.0.0.1
    spring.rabbitmq.port=5672
    spring.rabbitmq.username=guest
    spring.rabbitmq.password=guest
	spring.rabbitmq.virtual-host=/
 
 
 3.RabbitMQ集群模式
 普通模式(默认)，镜像模式
 集群中节点包括：内存节点(RAM)、磁盘节点(Disk，消息持久化)
 
 
 
 4.普通模式
 先按单机版安装。
 erlang分布式的每个节点上要保持相同的.erlang.cookie文件。所以拷贝其中一个到其它机器上
 /var/lib/rabbitmq/.erlang.cookie
 配置各节点的hosts文件（每台机器哟）：
 192.168.xx.xx rmq1
 192.168.xx.xx rmq2
 192.168.xx.xx rmq3

 在rmq2,rmq3上，加入集群：
 rabbitmqctl stop_app 
 rabbitmqctl reset 
 rabbitmqctl join_cluster --ram rabbit@rmq1 (--ram设置节点为内存节点，默认是磁盘节点)
 rabbitmqctl start_app 
 
 
 
 5.镜像集群
 //vhost之于Rabbit就像虚拟机之于物理机一样。
 //vhost之间是相互独立的，这避免了各种命名的冲突，就像App中的沙盒的概念一样，每个沙盒是相互独立的，且只能访问自己的沙盒，以保证非法访问别的沙盒带来的安全隐患。
 Rabbit镜像功能，需要基于RabbitMQ策略来实现，策略是用来控制和修改群集范围的某个vhost队列行为和Exchange行为
 rmq2# rabbitmqctl set_policy ha-all "^" '{"ha-mode":"all"}'
 策略名称为ha-all,策略模式为 all 即复制到所有节点，包含新增节点，
 策略正则表达式为 “^” 表示所有匹配所有队列名称。
 
 
 
 6.HAProxy负载均衡
 HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。
 根据官方数据，其最高极限支持10G的并发。HAProxy支持从4层至7层的网络交换，即覆盖所有的TCP协议。
 就是说，Haproxy 甚至还支持 Mysql 的均衡负载。为了实现RabbitMQ集群的软负载均衡，这里可以选择HAProxy。
 
 安装：yum install haproxy
 haproxy -v 查看版本
 service haproxy status
 service haproxy start
 service haproxy stop
 service haproxy restart

 
 配置文件的目录在/etc/haproxy/haproxy.cfg
 添加配置：
 #绑定配置
 listen rabbitmq_cluster
 bind 0.0.0.0:5672
 mode tcp
 #负载均衡算法
 balance roundrobin
 #RabbitMQ集群节点配置,其中ip1~ip3为RabbitMQ集群节点ip地址
 server rmq1 ip1:5672 check inter 5000 rise 2 fall 3 weight 1
 server rmq2 ip2:5672 check inter 5000 rise 2 fall 3 weight 1
 server rmq3 ip3:5672 check inter 5000 rise 2 fall 3 weight 1
 #check inter 2000 是检测心跳频率，rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用
 
 #haproxy监控页面地址
 listen stats
        bind 0.0.0.0:1080           #监听端口  
        stats refresh 30s           #统计页面自动刷新时间  
        stats uri /stats            #统计页面url  
        stats realm Haproxy Manager #统计页面密码框上提示文本  
        stats auth admin:123456      #统计页面用户名和密码设置  
        #stats hide-version         #隐藏统计页面上HAProxy的版本信息
		
springboot连接:
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-amqp</artifactId>
</dependency>

# 注意，此处连接的不在是rabbitmq节点了，而是Haproxy节点
spring.rabbitmq.host=192.168.xx.xx
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=123456
###在RabbitMQ的管理页面中，已经创建了一个 zy_host 虚拟机，绑定了admin用户
spring.rabbitmq.virtual-host=zy_host



7.keepalived
安装keepalived
 yum install keepalived
 配置：
  vim /etc/keepalived/keepalived.conf
  
  # 检测任务 
  vrrp_script check_haproxy { 
	# 检测HAProxy监本 
	script "/etc/keepalived/script/check_haproxy.sh" 
	# 每隔两秒检测 
	interval 2 
	# 权重 weight 2 
	}
	
	# 虚拟组 
	vrrp_instance haproxy { 
		state MASTER # 此处为`主`，备机是 `BACKUP` 
		interface enp4s0f0 # 物理网卡，根据情况而定 
		mcast_src_ip 192.168.1.219 # 当前主机ip 
		virtual_router_id 51 # 虚拟路由id，同一个组内需要相同 
		priority 100 # 主机的优先权要比备机高 
		advert_int 1 # 心跳检查频率，单位：秒 
		authentication { 
			# 认证，组内的要相同 
			auth_type PASS auth_pass 1111 
		} 
		# 调用脚本 
		track_script { 
			check_haproxy 
		} 
		# 虚拟ip，多个换行 
		virtual_ipaddress { 
			192.168.1.222 
		} 
	}
	
/etc/keepalived/script/check_haproxy.sh内容
#!/bin/bash 
LOGFILE="/var/log/keepalived-haproxy-status.log" 
date >> $LOGFILE 
if [ `ps -C haproxy --no-header |wc -l` -eq 0 ];then 
	echo "warning: restart haproxy" >> $LOGFILE 
	haproxy -f /etc/haproxy/haproxy.cfg 
	sleep 2 
	if [ `ps -C haproxy --no-header |wc -l` -eq 0 ];then 
		echo "fail: check_haproxy status" >> $LOGFILE 
		systemctl stop keepalived 
	fi 
else 
	echo "success: check_haproxy status" >> $LOGFILE 
fi

解释说明：
    Keepalived组之间的心跳检查并不能察觉到HAproxy负载是否正常，所以需要使用此脚本。
    在Keepalived主机上，开启此脚本检测HAproxy是否正常工作，如正常工作，记录日志。
    如进程不存在，则尝试重启HAproxy，两秒后检测，如果还没有则关掉主Keepalived，
	此时备Keepalived检测到主Keepalive挂掉，接管VIP，继续服务。

 



8.AMQP与rabbitmq
AMQP（Advanced Message Queue Protocol 高级消息队列协议）：是一个网络协议，它支持符合条件的客户端和消息代理中间件（message middleware broker）进行通讯。
rabbitmq是AMQP协议的实现者，所以amqp中的概念和准则也适用于rabbitmq。




9.交换机
RabbitMQ中，所有生产者提交的消息都由Exchange来接受，然后Exchange按照特定的策略转发到Queue进行存储
RabbitMQ提供了四种Exchange：fanout,direct,topic,header
 
 
 

