1.全部基本构建模块
bootstrap:Netty 应用程序通过设置 bootstrap（引导）类的开始，该类提供了一个 用于应用程序网络层配置的容器.

channel:底层网络传输 API 必须提供给应用 I/O操作的接口，如读，写，连接，绑定等等。对于我们来说，这是结构几乎总是会成为一个“socket”。 Netty 中的接口 Channel 定义了与 socket 丰富交互的操作集：bind, close, config, connect, isActive, isOpen, isWritable, read, write 等等.

ChannelHandler:支持很多协议，并且提供用于数据处理的容器。我们已经知道 ChannelHandler 由特定事件触发。 ChannelHandler 可专用于几乎所有的动作，包括将一个对象转为字节（或相反），执行过程中抛出的异常处理。这个类型接收到入站事件（包括接收到的数据）可以处理应用程序逻辑。

ChannelPipeline:提供了一个容器给ChannelHandler链并提供了一个API用于管理沿着链入站和出站事件的流动。每个Channel都有自己的ChannelPipeline，当Channel创建时自动创建的。ChannelHandler 是如何安装在ChannelPipeline.

EventLoop:用于处理Channel的I/O操作。一个单一的EventLoop通常会处理多个Channel事件。
EventLoopGroup 可以含有多于一个的 EventLoop 和 提供了一种迭代用于检索清单中的下一个.

ChannelFuture:Netty 所有的 I/O 操作都是异步。因为一个操作可能无法立即返回，我们需要有一种方法在以后确定它的结果。出于这个目的，Netty 提供了接口 ChannelFuture,它的 addListener 方法注册了一个 ChannelFutureListener ，当操作完成时，可以被通知（不管成功与否）。

2. Bootstrapping
Bootstrapping 有以下两种类型：
一种是用于客户端的Bootstrap
一种是用于服务端的ServerBootstrap

Bootstrap用来连接远程主机，有1个EventLoopGroup
ServerBootstrap用来绑定本地端口，有2个EventLoopGroup

一个 ServerBootstrap 可以认为有2个 Channel 集合，第一个集合包含一个单例 ServerChannel，代表持有一个绑定了本地端口的 socket；第二集合包含所有创建的 Channel，处理服务器所接收到的客户端进来的连接.


3. ChannelHandler
ChannelPipeline 就是 ChannelHandler 链的容器。
ChannelInboundHandler 和 ChannelOutboundHandler 继承自父接口 ChannelHandler.
若数据是从用户应用程序到远程主机则是“出站(outbound)”，相反若数据时从远程主机到用户应用程序则是“入站(inbound)”。
ChannelHandler的类型是有很多的,为了能够让开发处理逻辑变得简单，Netty提供了一些默认的处理程序来实现形式的“adapter（适配器）”类.
有几个适配器类，可以减少编写自定义 ChannelHandlers ,会经常调用的适配器：ChannelHandlerAdapter、ChannelInboundHandlerAdapter、ChannelOutboundHandlerAdapter、ChannelDuplexHandlerAdapter.
 ChannelHandler 的子类型：编码器、解码器以及 ChannelInboundHandlerAdapter 的子类SimpleChannelInboundHandler.
SimpleChannelHandler
也许最常见的处理器是接收到解码后的消息并应用一些业务逻辑到这些数据。要创建这样一个 ChannelHandler，你只需要扩展基类SimpleChannelInboundHandler 其中 T 是想要进行处理的类型。
SimpleChannelInboundHandler能自动释放ByteBuf.



4. ByteBuf
既然所有的网络通信都是要基于底层的字节流来传输，那么传输所使用的数据接口就要求是效率高得、使用方便的而且容易使用的，Netty的ByteBuf更好能够达到这些要求



5.为了支持TCP的粘包和拆包，一般采用如下4种方式：
  1）消息长度固定，累计读取到消息长度总和为定长Len的报文之后即认为是读取到了一个完整的消息。计数器归位，重新读取。
  2）将回车换行符作为消息结束符。
  3）将特殊的分隔符作为消息分隔符，回车换行符是他的一种。
  4）通过在消息头定义长度字段来标识消息总长度。

FixedLengthFrameDecoder固定长度解码器，它能够按照指定的长度对消息进行自动解码
pipeline.addLast(new FixedLengthFrameDecoder(23));

DelimiterBasedFrameDecoder允许我们指定任意特殊字符作为分隔符。
DelimiterBasedFrameDecoder构造方法
public DelimiterBasedFrameDecoder(
            int maxFrameLength, boolean stripDelimiter, boolean failFast, ByteBuf delimiters)

//设置特殊分隔符
	    ByteBuf buf  = Unpooled.copiedBuffer("$_".getBytes());
	    sc.pipeline().addLast(new DelimiterBasedFrameDecoder(1024, buf));

LineBasedframeDecoder
socketChannel.pipeline().addLast(new LineBasedFrameDecoder(1024));



6.Protobuf是一种平台无关、语言无关、可扩展且轻便高效的序列化数据结构的协议，可以用于网络通信和数据存储。



7.编解码方式
LengthFieldBasedFrameDecoder解码时，计算每个数据包的整体长度时，多增加了一部分。
需要LengthFieldPrepender
//解码
//Decoders
pipeline.addLast("frameDecoder",
new LengthFieldBasedFrameDecoder(1048576, 0, 4, 0, 4));
pipeline.addLast("bytesDecoder",
new ByteArrayDecoder());

//编码
//Encoder
pipeline.addLast("frameEncoder", new LengthFieldPrepender(4));
pipeline.addLast("bytesEncoder", new ByteArrayEncoder());

//然后您可以使用字节数组而不是ByteBuf作为一个信息:
void channelRead(ChannelHandlerContext ctx, byte[] bytes) {
...
}



8.netty服务端默认启动线程有多少
NioEventLoopGroup//创建的线程，不提供参数时，默认为2倍cpu的核数
netty解决jdk空轮训bug

异步串行无锁化



9.netty在哪检测新链接



10.pipeline在创建channel时创建
pipeline的数据节点ChannelHandlerContext
ChannelHandlerContext有哪些方法：
channel()当前节点的channel
pipeline()当前节点的pipeline




11.一个Channel包含了一个ChannelPipeline,而ChannelPipeline中又维护了一个由ChannelHandlerCOntext组成的双向链表.
在ChannelPipeline中，ChannelHandler可以被链在一起处理用户逻辑。

ChannelHandler处理顺序为先添加先处理.



12. ChannelOutboundHandler
处理顺序为先添加后处理




13.netty接收16进制字节码
channelRead( ... ){
        ByteBuf buf = (ByteBuf) msg;
        byte[] receiveMsgBytes = new byte[buf.readableBytes()];
        buf.readBytes(receiveMsgBytes);
        //receiveMsgBytes 就收到了.
}
如果还想转换成16进制字符串
maven的pom中加入

 <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.10</version>
</dependency>
就可以用
Hex.encodeHexString(receiveMsgBytes)



14.netty客户端管理
使用concurrentHashmap来管理



15.maven工程打包为jar包
pom配置
<build>
        <plugins>
	    <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source><!-- 源代码使用的JDK版本 -->
                    <target>1.8</target><!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>UTF-8</encoding><!-- 字符集编码 -->
                </configuration>
            </plugin>

		<!-- 使用maven-assembly-plugin插件打包，包含项目本身的代码、资源以及所有的依赖包 -->
	    <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>server.server</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>

        </plugins>
</build>

在项目第一个目录下运行：
mvn package assembly:single
打包后会在target目录下生成一个xxx-jar-with-dependencies.jar文件。
通过java -jar xxx.jar来运行

如果想直接通过
mvn package打包
	<plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-assembly-plugin</artifactId>  
            <configuration>  
                <archive>  
                    <manifest>  
                        <mainClass>xxg.Main</mainClass>  
                    </manifest>  
                </archive>  
                <descriptorRefs>  
                    <descriptorRef>jar-with-dependencies</descriptorRef>  
                </descriptorRefs>  
            </configuration>  
            <executions>  
                <execution>  
                    <id>make-assembly</id>  
                    <phase>package</phase>  
                    <goals>  
                        <goal>single</goal>  
                    </goals>  
                </execution>  
            </executions>  
        </plugin>   

如果项目中用到spring Framework，用这种方式打出来的包运行时会出错
使用maven-shade-plugin插件打包
<build>  
    <plugins>  
  
        <plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-shade-plugin</artifactId>    
            <executions>  
                <execution>  
                    <phase>package</phase>  
                    <goals>  
                        <goal>shade</goal>  
                    </goals>  
                    <configuration>  
                        <transformers>  
                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
                                <mainClass>xxx.Main</mainClass>  
                            </transformer>  
                        </transformers>  
                    </configuration>  
                </execution>  
            </executions>  
        </plugin>  
  
    </plugins>  
</build>  

将依赖打到一个jar包中，运行时会出现读取XML schema文件出错。原因是Spring Framework的多个jar包中包含相同的文件spring.handlers和spring.schemas，如果生成一个jar包会互相覆盖。为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并.
<build>  
    <plugins>  
  
        <plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-shade-plugin</artifactId>  
            <executions>  
                <execution>  
                    <phase>package</phase>  
                    <goals>  
                        <goal>shade</goal>  
                    </goals>  
                    <configuration>  
                        <transformers>  
                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
                                <mainClass>com.xxg.Main</mainClass>  
                            </transformer>  
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
                                <resource>META-INF/spring.handlers</resource>  
                            </transformer>  
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">  
                                <resource>META-INF/spring.schemas</resource>  
                            </transformer>  
                        </transformers>  
                    </configuration>  
                </execution>  
            </executions>  
        </plugin>  
    </plugins>  
</build>  



16.netty解码器
ByteToMessageDecoder
累加字节流
调用子类的decode方法进行解析
将解析到的Bytebuf向下传



17.netty百万连接优化
不做任何优化，服务端最多连接到800、900的样子。
vi /etc/security/limits.conf
添加：
* hard nofile 1000000
* soft nofile 1000000
//soft是一个警告值，而hard则是一个真正意义的阀值，超过就会报错
* 代表针对所有用户
            noproc 是代表最大进程数
            nofile 是代表最大文件打开数 
重启电脑
limits.conf生效就必须保证/etc/pam.d/login中有：session    required   pam_limits.so
系统全局最大文件句柄数
vi /proc/sys/fs/file-max
直接修改里面的数字，默认为10000，但这是临时的
vi /etc/sysctl.conf
修改fs.file-max = 1000000



18.给应用添加线程池
将pipeline.addLast(new ServerHandler());
改为：
private EventLoopGroup serverGroup = new NioEventLoopGroup(16);
pipeline.addLast(serverGroup,new ServerHandler());



19.centos jar开机启动
编写注册服务
在/etc/systemd/system下编写脚本
# cd /etc/systemd/system
#vi dwehome.service
[Unit]
Description=dwehome-service
After=network.target
[Service]
Type=forking
ExecStart=/usr/local/java/bin/java -jar /dwehome/dwehome.jar
PrivateTmp=true
[Install]
WantedBy=multi-user.target

说明：PrivateTmp 设置使用这个属性的service，都会使用私有的tmp目录。
/tmp目录一般是所有用户和所有service都共享的，对于所有用户和service来说，都会有写和读的权限。

服务操作命令
systemctl  enable   dwehome    #开机自启动
systemctl  stop  dwehome  #停止
systemctl  start dwehome  #启动

问题：
linux下systemctl enable （service名）时出现file exists的解决办法：
systemctl disable （服务名）




21）心跳
心跳机制
﻿心跳是在TCP长连接中，客户端和服务端定时向对方发送数据包通知对方自己还在线，保证连接的有效性的一种机制
在服务器和客户端之间一定时间内没有数据交互时, 即处于 idle 状态时, 客户端或服务器会发送一个特殊的数据包给对方, 
当接收方收到这个数据报文后, 也立即发送一个特殊的数据报文, 
回应发送方, 此即一个 PING-PONG 交互. 自然地, 当某一端收到心跳消息后, 就知道了对方仍然在线, 这就确保 TCP 连接的有效性.

使用：
socketChannel.pipeline().addLast(new IdleStateHandler(5, 0, 0, TimeUnit.SECONDS));
class HeartBeatServerHandler extends ChannelInboundHandlerAdapter {
	@Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
        System.out.println("已经5秒未收到客户端的消息了！");
        if (evt instanceof IdleStateEvent){
            IdleStateEvent event = (IdleStateEvent)evt;
            if (event.state()== IdleState.READER_IDLE){
                lossConnectCount++;
                if (lossConnectCount>2){
                    System.out.println("关闭这个不活跃通道！");
                    ctx.channel().close();
                }
            }
        }else {
            super.userEventTriggered(ctx,evt);
        }
    }
}

IdleStateHandler参数：
readerIdleTime读空闲超时时间设定，如果channelRead()方法超过readerIdleTime时间未被调用则会触发超时事件调用userEventTrigger()方法；
writerIdleTime写空闲超时时间设定，如果write()方法超过writerIdleTime时间未被调用则会触发超时事件调用userEventTrigger()方法；
allIdleTime所有类型的空闲超时时间设定，包括读空闲和写空闲；
unit时间单位，包括时分秒等；

心跳任务建立流程：
（1）IdleStateHandler的channelActive()方法在socket通道建立时被触发
（2）channelActive()方法调用Initialize()方法,根据配置的readerIdleTime，WriteIdleTIme等超时事件参数往任务队列taskQueue中添加定时任务task；
    （定时任务）
（3）定时任务添加到对应线程EventLoopExecutor对应的任务队列taskQueue中，在对应线程的run()方法中循环执行
	 用当前时间减去最后一次channelRead方法调用的时间判断是否空闲超时；
	 如果空闲超时则创建空闲超时事件并传递到channelPipeline中；
（4）在管道中传递调用自定义的userEventTrigger()方法
	protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws Exception {
		ctx.fireUserEventTriggered(evt);
	}