1.下载https://redis.io/download

2.#tar -xzvf redis-xx.tar.gz
#cd redis-xx
#Make
#cd src
#Make install 
会安装到/usr/local/bin下
(指定安装位置Make install PREFIX=/usr/local/redis,prefix必须大写)
安装后会生成以下文件
redis-benchmark : Redis 性能测试工具
redis-check-aof : 检查 aof 日志的工具
redis-check-dump : 检查 rdb 日志的工具
redis-cli : 连接用的客户端
redis-server : Redis 服务进程
(问题：1./bin/sh: cc: command not found，使用命令安装gcc：yum install gcc。2、 error: jemalloc/jemalloc.h: No such file or directory，将make改为make MALLOC=libc，推测是因为编译库的问题。)

3.Redis源代码目录的utils文件夹中有一个名为redis_init_script的初始化脚本文件
cp utils/redis_init_script /etc/init.d
cd /etc/init.d
mv redis_init_script redis_6379

4.建立以下需要的文件夹
/etc/redis	存放Redis的配置文件
/mnt/sdb4T/Importance/redisData/6379	存放Redis的持久化文件

5.修改配置文件
刚解压的目录redis-x.x.x下有redis.conf复制到/etc/redis 目录中，以端口号命名（如“6379.conf”）
cp redis.conf /etc/redis/6379.conf
vi /etc/redis/6379.conf
daemonize	yes	           #使Redis以守护进程模式运行
pidfile	/var/run/redis_端口号.pid	   #设置Redis的PID文件位置
port	端口号	                   #设置Redis监听的端口号
dir	/mnt/sdb4T/Importance/redisData/6379	#设置持久化文件存放位置
bind 127.0.0.1               #要远程访问需要注释这行,并且添加密码或daemonize改为no

6.现在也可以使用下面的命令来启动和关闭Redis了
/etc/init.d/redis_6379 start （需要vim redis_6379,修改地址为/usr/local/redis/xxx，相关到全部要修改）
/etc/init.d/redis_6379 stop

7.开机启动
vim /etc/init.d/redis_6379
在打开的redis初始化脚本文件头部第四行的位置，追加下面两句
# chkconfig: 2345 90 10 
# description: Redis is a persistent key-value database
//设置开机执行redis脚本
chkconfig redis_6379 on
通过上面的操作后，以后也可以直接用下面的命令对Redis进行启动和关闭了，如下
service redis_6379 start
service redis_6379 stop

8.安全停止Redis
考虑到 Redis 有可能正在将内存中的数据同步到硬盘中，强行终止 Redis 进程可能会导致数据丢失。正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，方法为：
redis-cli shutdown （-p 端口）

9.客户端连接
#redis-cli
链接到指定主机时,用redis-cli -h 192.168.22.150 -p 6379

10.设置密码
修改配置文件
vi /etc/redis/6379.conf
找到#requirepass foobared,去掉注释的#，把foobared替换成自己的密码即可,如：qwertyui. 
重新启动redis
连接时使用：redis-cli -a qwertyui
添加密码后要停止redis要使用：# redis-cli -a qwertyui shutdown
service redis_6379 stop会出现
	Stopping ...
	(error) NOAUTH Authentication required.
	Waiting for Redis to shutdown ...

11.允许远程连接
修改配置文件
注释掉bind 127.0.0.1

12.spring boot连接redis
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
application.properties添加配置
# Redis数据库索引（默认为0 redis有16个库）
spring.redis.database=0
spring.redis.host=192.168.50.52
spring.redis.port=6379
spring.redis.password=qwertyui
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=8 
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1ms
# 连接超时时间（毫秒）
spring.redis.timeout=100000ms


13.StringRedisTemplate连接redis
#操作字符串
stringRedisTemplate.opsForValue().set("key","value");
stringRedisTemplate.opsForValue().get("key");
#操作set
Set<String> set=new HashSet<String>();
stringRedisTemplate.opsForSet().add("set",set);
stringRedisTemplate.opsForSet().members("set");
#操作hash
Map<String,String> map=new HashMap<String,String>();
stringRedisTemplate.opsForHash().putAll("map",map);
stringRedisTemplate.opsForHash().get("map");
stringRedisTemplate.opsForHash().get("map","map1");
#操作list
List<String> list=new ArrayList<String>();
stringRedisTemplate.opsForList().leftPush("list",list1);
stringRedisTemplate.opsForList().rightPush("list",list2);
List<String> resultList1=(List<String>)stringRedisTemplate.opsForList().leftPop("list");
List<String> resultList2=(List<String>)stringRedisTemplate.opsForList().rightPop("list");
#删除key
stringRedisTemplate.delete("test");

RedisTemplate中定义了5种数据结构操作
redisTemplate.opsForValue();　　//操作字符串
redisTemplate.opsForHash();　　 //操作hash
redisTemplate.opsForList();　　 //操作list
redisTemplate.opsForSet();　　  //操作set
redisTemplate.opsForZSet();　 　//操作有序set


14.显示和删除所有的key
在redis-cli下
>keys *
或>key test* 所有以test开头的键
flushdb
flushall


15.普通java工程使用jedis
Redis多种类型的value，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。
Jedis 是 Redis 官方首选的 Java 客户端开发包。
<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->
<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>2.10.2</version>
</dependency>
Jedis是Redis官方推荐的面向Java的操作Redis的客户端，而RedisTemplate是SpringDataRedis中对JedisApi的高度封装。
SpringDataRedis相对于Jedis来说可以方便地更换Redis的Java客户端，比Jedis多了自动管理连接池的特性，方便与其他Spring框架进行搭配使用如：SpringCache




--------------------------------------集群搭建----------------------------------------
15.集群搭建
#tar -xzvf redis-xx.tar.gz
#cd redis-xx
#Make
#cd src
#Make install 
mkdir /etc/redis_cluster	存放Redis的配置文件
Cd /etc/redis_cluster
Mkdir 7001 7002 7003
Cp /home/redis-5.0.0/redis.conf 7001/
Cp /home/redis-5.0.0/redis.conf 7002/
Cp /home/redis-5.0.0/redis.conf 7003/
分别对7001，7002、7003文件夹中的3个文件修改对应的配置
daemonize    yes                          //redis后台运行
pidfile  /var/run/redis_7000.pid          //pidfile文件对应7000,7002,7003
port  7000                                //端口7000,7002,7003
cluster-enabled  yes                      //开启集群  把注释#去掉
cluster-config-file  nodes_7000.conf      //集群的配置  配置文件首次启动自动生成 7000,7001,7002
cluster-node-timeout  5000                //请求超时  设置5秒够了
appendonly  yes                         //aof日志开启  有需要就开启，它会每次写操作都记录一条日志
bind 192.168.2.200			  
另一台机器也同样，但端口使用7004，7005，7006
启动各个节点：
redis-server redis_cluster/7001/redis.conf
redis-server redis_cluster/7002/redis.conf
redis-server redis_cluster/7003/redis.conf

redis-server redis_cluster/7004/redis.conf
redis-server redis_cluster/7005/redis.conf
redis-server redis_cluster/7006/redis.conf 

检查 redis 启动情况
ps -ef | grep redis
root 61020 1  0 02:14 ?  00:00:01 redis-server 127.0.0.1:7001 [cluster] 
（需有cluster字样，不然redid-cli -p 7001 shutdown,修改配置文件，再启动）
netstat -tlnp | grep redis （没有netstat使用ss命令）

redis5.0使用redis-cli创建集群：
redis-cli --cluster create 192.168.2.200:7001 192.168.2.200:7002 192.168.2.200:7003 192.168.2.201:7004 192.168.2.201:7005 192.168.2.201:7006 --cluster-replicas 1
redis5.0以下使用redis-trib.rb创建集群：
运行一下redis-trib.rb，在源代码src里
如果提示ruby:no such file or directory请先安装ruby:
yum -y install ruby ruby-devel rubygems rpm-build 
再用 gem 这个命令来安装 redis接口    gem是ruby的一个工具包:
gem install redis    //等一会儿就好了,两台机器都要
(redis requires Ruby version >= 2.2.2问题:
Centos默认支持ruby到2.0.0，可gem 安装redis需要最低是2.2.2
安装RVM
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB 
curl -L https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash -s stable
Find / -name rvm -print
source /usr/local/rvm/scripts/rvm
rvm list known  //查看rvm库中已知的ruby版本
rvm install 2.5.1  //安装一个ruby版本
rvm use 2.5.1. //使用一个ruby版本
rvm remove 2.0.0   //卸载一个已知版本
)

创建集群
cp /home/redis-5.0.0/src/redis-trib.rb /usr/local/bin
确认所有的节点都启动,使用参数create 创建(在192.168.2.200上)
redis-trib.rb  create  --replicas  1  192.168.2.200:7001 192.168.2.200:7002  192.168.2.200:7003 192.168.2.201:7004  192.168.2.201:7005  192.168.2.201:7006
(问题：Could not connect to Redis at 192.168.2.200:7001: Connection refused
修改bind为自己的ip。
问题： Redis at 192.168.2.201:7004: No route to host
关闭防火墙systemctl stop firewalld，systemctl  disable firewalld
)
提示Can I set the above configuration? (type 'yes' to accept): yes    //输入yes
测试集群：
Redis-cli -h 192.168.2.200 -c -p 7001
>Set hello word
在另一台机器上Redis-cli -h 192.168.2.201 -c -p 7004
>get hello
"World"


16.java连接redis集群
springboot:
spring.redis.cluster.nodes=115.xxx.xx.xxx:7000,115.xxx.xx.xxx:7001,...,111.xxx.xxx.xx:7008
spring.redis.password=password

Jedis:
    JedisPoolConfig poolConfig = new JedisPoolConfig();
    // 最大连接数
    poolConfig.setMaxTotal(1);
    // 最大空闲数
    poolConfig.setMaxIdle(1);
    // 最大允许等待时间，如果超过这个时间还未获取到连接，则会报JedisException异常：
    poolConfig.setMaxWaitMillis(1000);
    Set<HostAndPort> nodes = new LinkedHashSet<HostAndPort>();
    nodes.add(new HostAndPort("192.168.83.128", 6379));
    nodes.add(new HostAndPort("192.168.83.128", 6380));
    nodes.add(new HostAndPort("192.168.83.128", 6381));
    JedisCluster cluster = new JedisCluster(nodes, poolConfig);




-------------------------------------redis使用------------------------------------

1.redis默认情况下就是使用LRU策略的，因为内存是有限的，但是如果你不断地往redis里面写入数据，那肯定是没法存放下所有的数据在内存的.
所以redis默认情况下，当内存中写入的数据很满之后，就会使用LRU算法清理掉部分内存中的数据，腾出一些空间来，然后让新的数据写入redis缓存中.

redis.conf
maxmemory，设置redis用来存放数据的最大的内存大小，一旦超出这个内存大小之后，就会立即使用LRU算法清理掉部分数据
如果用LRU，那么就是将最近最少使用的数据从缓存中清除出去.
对于64 bit的机器，如果maxmemory设置为0，那么就默认不限制内存的使用，直到耗尽机器中所有的内存为止; 但是对于32 bit的机器，有一个隐式的闲置就是3GB.

maxmemory-policy，可以设置内存达到最大闲置后，采取什么策略来处理
（1）noeviction: 如果内存使用达到了maxmemory，client还要继续写入数据，那么就直接报错给客户端
（2）allkeys-lru: 就是我们常说的LRU算法，移除掉最近最少使用的那些keys对应的数据
（3）volatile-lru: 也是采取LRU算法，但是仅仅针对那些设置了指定存活时间（TTL）的key才会清理掉
（4）allkeys-random: 随机选择一些key来删除掉
（5）volatile-random: 随机选择一些设置了TTL的key来删除掉
（6）volatile-ttl: 移除掉部分keys，选择那些TTL时间比较短的keys




2.过期时间设置
expire key ttl. 将健key的生成时间设置为ttl秒
pexpire key ttl    将健key的生成时间设置为ttl毫秒
expireat key timestamp 将健key的生成时间设置为timestamp秒
查看键空闲时间：object idletime key //返回单位秒
ttl key //查看键的过期时间
persist key  //取消过期时间
注意：DEL, SET, GETSET会将key对应存储的值替换成新的，命令也会清除掉超时时间；

stringRedisTemplate.getExpire("test")//根据key获取过期时间  
stringRedisTemplate.getExpire("test",TimeUnit.SECONDS)//根据key获取过期时间并换算成指定单位  
stringRedisTemplate.opsForValue().set("test", "100",60*10,TimeUnit.SECONDS);//向redis里存入数据和设置缓存时间
stringRedisTemplate.expire("red_123",1000 , TimeUnit.MILLISECONDS);//设置过期时间



3.持久化
RDB
RDB 是 Redis 默认的持久化方案。在指定的时间间隔内，执行指定次数的写操作，则会将内存中的数据写入到磁盘中。即在指定目录下生成一个dump.rdb文件。Redis 重启会通过加载dump.rdb文件恢复数据。
redis.conf 文件，找到 SNAPSHOTTING 对应内容
# save ""
save 900 1
save 300 10
save 60 10000
官方出厂配置默认是 900秒内有1个更改，300秒内有10个更改以及60秒内有10000个更改，则将内存中的数据快照写入磁盘。
指定本地数据库文件名，一般采用默认的 dump.rdb
dbfilename dump.rdb

通过RDB文件恢复数据
将dump.rdb 文件拷贝到redis的安装目录的bin目录下，重启redis服务即可。在实际开发中，一般会考虑到物理机硬盘损坏情况，选择备份dump.rdb 。

RDB 的优缺点
优点：
1） 适合大规模的数据恢复。
2） 如果业务对数据完整性和一致性要求不高，RDB是很好的选择。
缺点：
1） 数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。
2） 备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。
所以Redis 的持久化和数据的恢复要选择在夜深人静的时候执行是比较合理的。

AOF
AOF ：Redis 默认不开启。它的出现是为了弥补RDB的不足（数据的不一致性），所以它采用日志的形式来记录每个写操作，并追加到文件中。Redis 重启的会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。
打开 redis.conf 文件，找到 APPEND ONLY MODE 对应内容
1） redis 默认关闭，开启需要手动把no改为yes
appendonly yes
2） 指定本地数据库文件名，默认值为 appendonly.aof
appendfilename "appendonly.aof"
3）指定更新日志条件
# appendfsync always
appendfsync everysec
# appendfsync no
解说：
always：同步持久化，每次发生数据变化会立刻写入到磁盘中。性能较差当数据完整性比较好（慢，安全）
everysec：出厂默认推荐，每秒异步记录一次（默认值）
no：不同步
4） 配置重写触发机制
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
解说：当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。一般都设置为3G，64M太小了。

AOF的重写机制
前面也说到了，AOF的工作原理是将写操作追加到文件中，文件的冗余内容会越来越多。所以聪明的 Redis 新增了重写机制。当AOF文件的大小超过所设定的阈值时，Redis就会对AOF文件的内容压缩。
重写的原理：Redis 会fork出一条新进程，读取内存中的数据，并重新写到一个临时文件中。并没有读取旧文件（你都那么大了)。最后替换旧的aof文件。
触发机制：当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。这里的“一倍”和“64M” 可以通过配置文件修改。





4.gossip协议
Gossip过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。



5.新主节点选取
redis新主节点选取是根据raft算法的领头选举算法实现。









































